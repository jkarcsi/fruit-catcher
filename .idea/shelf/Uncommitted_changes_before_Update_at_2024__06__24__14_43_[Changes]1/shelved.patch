Index: src/main/java/model/database/DatabaseInitializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.database;\r\n\r\nimport utils.ConfigUtil;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\npublic class DatabaseInitializer {\r\n\r\n    public static final String CREATE_EXTERNAL_SCORES_TABLE = \"CREATE TABLE IF NOT EXISTS scores (\" +\r\n            \"id INT NOT NULL AUTO_INCREMENT, \" +\r\n            \"username VARCHAR(50) DEFAULT NULL, \" +\r\n            \"score INT DEFAULT NULL, \" +\r\n            \"timestamp TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, \" +\r\n            \"PRIMARY KEY (id), \" +\r\n            \"KEY fk_scores_users (username), \" +\r\n            \"CONSTRAINT fk_scores_users FOREIGN KEY (username) REFERENCES users (username) ON DELETE CASCADE\" +\r\n            \") ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\";\r\n    public static final String CREATE_EXTERNAL_USERS_TABLE = \"CREATE TABLE IF NOT EXISTS users (\" +\r\n            \"username VARCHAR(50) NOT NULL, \" +\r\n            \"password VARCHAR(255) NOT NULL, \" +\r\n            \"password_reminder VARCHAR(255) DEFAULT NULL, \" +\r\n            \"role VARCHAR(10) DEFAULT 'user', \" +\r\n            \"status VARCHAR(10) DEFAULT 'active', \" +\r\n            \"PRIMARY KEY (username)\" +\r\n            \") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\";\r\n    public static final String CREATE_INTERNAL_USERS_TABLE = \"CREATE TABLE IF NOT EXISTS users (\" +\r\n            \"username VARCHAR(50) NOT NULL, \" +\r\n            \"password VARCHAR(255) NOT NULL, \" +\r\n            \"password_reminder VARCHAR(255) DEFAULT NULL, \" +\r\n            \"role VARCHAR(10) DEFAULT 'user', \" +\r\n            \"status VARCHAR(10) DEFAULT 'active', \" +\r\n            \"PRIMARY KEY (username)\" +\r\n            \")\";\r\n    public static final String CREATE_INTERNAL_SCORES_TABLE = \"CREATE TABLE IF NOT EXISTS scores (\" +\r\n            \"id INTEGER PRIMARY KEY AUTOINCREMENT, \" +\r\n            \"username VARCHAR(50) DEFAULT NULL, \" +\r\n            \"score INTEGER, \" +\r\n            \"timestamp VARCHAR(50) NULL DEFAULT CURRENT_TIMESTAMP, \" +\r\n            \"FOREIGN KEY (username) REFERENCES users (username) ON DELETE CASCADE\" +\r\n            \")\";\r\n    public static final String TEST_DB_URL = \"test.db.url\";\r\n    public static final String DB_URL = \"db.url\";\r\n    public static final String TEST_DB_USER = \"test.db.user\";\r\n    public static final String TEST_DB_PASSWORD = \"test.db.password\";\r\n    public static final String JDBC_SQLITE_FCG_TEST_DB = \"jdbc:sqlite:fcg_test.db\";\r\n    public static final String JDBC_SQLITE_FCG_DB = \"jdbc:sqlite:fcg.db\";\r\n    public static final String DB_USER = \"db.user\";\r\n    public static final String DB_PASSWORD = \"db.password\";\r\n    public static final char FORWARD_SLASH = '/';\r\n\r\n    private DatabaseInitializer() {}\r\n\r\n    private static String dbUrl;\r\n    private static String dbUser;\r\n    private static String dbPassword;\r\n    private static String dbName;\r\n    private static String baseDbUrl;\r\n\r\n    public static void initializeDatabase() throws SQLException {\r\n        dbUrl = ConfigUtil.getConfig(DB_URL);\r\n        dbUser = ConfigUtil.getConfig(DB_USER);\r\n        dbPassword = ConfigUtil.getConfig(DB_PASSWORD);\r\n\r\n        if (dbUrl == null || dbUser == null || dbPassword == null) {\r\n            dbUrl = JDBC_SQLITE_FCG_DB;\r\n            initializeSQLiteDatabase(dbUrl);\r\n        } else {\r\n            getAdditionalDbData(false);\r\n            initializeMySQLDatabase(dbUrl);\r\n        }\r\n    }\r\n\r\n    public static void initializeTestDatabase() throws SQLException {\r\n        dbUrl = ConfigUtil.getTestConfig(TEST_DB_URL);\r\n        dbUser = ConfigUtil.getTestConfig(TEST_DB_USER);\r\n        dbPassword = ConfigUtil.getTestConfig(TEST_DB_PASSWORD);\r\n\r\n        if (dbUrl == null || dbUser == null || dbPassword == null) {\r\n            dbUrl = JDBC_SQLITE_FCG_TEST_DB;\r\n            initializeSQLiteDatabase(dbUrl);\r\n        } else {\r\n            getAdditionalDbData(true);\r\n            initializeMySQLDatabase(dbUrl);\r\n        }\r\n    }\r\n\r\n    private static void initializeMySQLDatabase(String dbUrl) throws SQLException {\r\n        try (Connection baseConnection = DriverManager.getConnection(baseDbUrl, dbUser, dbPassword);\r\n             Statement baseStatement = baseConnection.createStatement()) {\r\n\r\n            baseStatement.executeUpdate(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\r\n        }\r\n\r\n        try (Connection connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword);\r\n             Statement statement = connection.createStatement()) {\r\n\r\n            statement.executeUpdate(CREATE_EXTERNAL_USERS_TABLE);\r\n\r\n            statement.executeUpdate(CREATE_EXTERNAL_SCORES_TABLE);\r\n        }\r\n    }\r\n\r\n    private static void initializeSQLiteDatabase(String dbUrl) throws SQLException {\r\n        try (Connection connection = DriverManager.getConnection(dbUrl);\r\n             Statement statement = connection.createStatement()) {\r\n\r\n            statement.executeUpdate(CREATE_INTERNAL_USERS_TABLE);\r\n\r\n            statement.executeUpdate(CREATE_INTERNAL_SCORES_TABLE);\r\n        }\r\n    }\r\n\r\n    private static void getAdditionalDbData(boolean isTest) {\r\n        dbName = isTest ?\r\n                ConfigUtil.getTestConfig(TEST_DB_URL).substring(dbUrl.lastIndexOf(FORWARD_SLASH) + 1)\r\n                :\r\n                ConfigUtil.getConfig(DB_URL).substring(dbUrl.lastIndexOf(FORWARD_SLASH) + 1);\r\n        baseDbUrl = isTest ? ConfigUtil.getTestConfig(TEST_DB_URL).substring(0, dbUrl.lastIndexOf(FORWARD_SLASH))\r\n                :\r\n                ConfigUtil.getConfig(DB_URL).substring(0, dbUrl.lastIndexOf(FORWARD_SLASH));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/database/DatabaseInitializer.java b/src/main/java/model/database/DatabaseInitializer.java
--- a/src/main/java/model/database/DatabaseInitializer.java	
+++ b/src/main/java/model/database/DatabaseInitializer.java	
@@ -1,6 +1,6 @@
 package model.database;
 
-import utils.ConfigUtil;
+import util.ConfigUtil;
 
 import java.sql.Connection;
 import java.sql.DriverManager;
Index: src/main/java/controller/SettingsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.stage.DirectoryChooser;\r\nimport utils.Difficulty;\r\nimport utils.GameMode;\r\nimport utils.Language;\r\nimport utils.Localizable;\r\nimport utils.PreferencesUtil;\r\nimport utils.Texture;\r\n\r\nimport java.io.File;\r\nimport java.net.URL;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.ResourceBundle;\r\n\r\nimport static utils.FXMLPaths.MAIN_MENU;\r\nimport static utils.ResourcePaths.DEFAULT_LOG_PATH;\r\nimport static utils.SceneConstants.*;\r\n\r\npublic class SettingsController extends BaseController implements Initializable {\r\n\r\n    @FXML\r\n    ComboBox<String> gameModeComboBox;\r\n\r\n    @FXML\r\n    ComboBox<String> difficultyComboBox;\r\n\r\n    @FXML\r\n    ComboBox<String> textureComboBox;\r\n\r\n    @FXML\r\n    TextField logFilePathTextField;\r\n\r\n    @FXML\r\n    ComboBox<String> languageComboBox;\r\n\r\n    @FXML\r\n    ComboBox<String> leftKeyComboBox;\r\n\r\n    @FXML\r\n    ComboBox<String> rightKeyComboBox;\r\n\r\n    @FXML\r\n    Label gameModeLabel;\r\n\r\n    @FXML\r\n    Label difficultyLabel;\r\n\r\n    @FXML\r\n    Label textureLabel;\r\n\r\n    @FXML\r\n    Label logFilePathLabel;\r\n\r\n    @FXML\r\n    Label languageLabel;\r\n\r\n    @FXML\r\n    Label leftKeyLabel;\r\n\r\n    @FXML\r\n    Label rightKeyLabel;\r\n\r\n    @FXML\r\n    Button saveButton;\r\n\r\n    @FXML\r\n    Button backToMainMenuButton;\r\n\r\n    @FXML\r\n    Button chooseDirectoryButton;\r\n\r\n    private ChangeListener<String> languageChangeListener;\r\n    private Map<String, String> localizedToEnumTextureMap;\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        loadSettings();\r\n        initializeLocalizedToEnumTextureMap();\r\n        updateTexts();\r\n        loadComboBoxItems();\r\n        addListeners();\r\n    }\r\n\r\n    private void initializeLocalizedToEnumTextureMap() {\r\n        localizedToEnumTextureMap = new HashMap<>();\r\n        ResourceBundle bundle = getBundle();\r\n        for (Texture texture : Texture.values()) {\r\n            String localizedTextureName = bundle.getString(texture.getKey().toLowerCase());\r\n            localizedToEnumTextureMap.put(capitalize(localizedTextureName), texture.name());\r\n        }\r\n    }\r\n\r\n    private void addListeners() {\r\n        textureComboBox.valueProperty().addListener((observable, oldValue, newValue) -> applyTexture());\r\n\r\n        languageChangeListener = (observable, oldValue, newValue) -> switchLanguageAndUpdateComboBoxDisplay(newValue);\r\n        languageComboBox.valueProperty().addListener(languageChangeListener);\r\n    }\r\n\r\n    private void loadSettings() {\r\n        ResourceBundle bundle = getBundle();\r\n        gameModeComboBox.setValue(capitalize(bundle.getString(GAME_MODE + DOT + PreferencesUtil.getPreference(GAME_MODE,\r\n                GameMode.NORMAL.getValue()).toLowerCase())));\r\n        difficultyComboBox.setValue(capitalize(bundle.getString(DIFFICULTY + DOT + PreferencesUtil.getPreference(\r\n                DIFFICULTY,\r\n                Difficulty.EASY.getValue()).toLowerCase())));\r\n        textureComboBox.setValue(capitalize(bundle.getString(TEXTURE + DOT + PreferencesUtil.getTexture()\r\n                .getValue()\r\n                .toLowerCase())));\r\n        languageComboBox.setValue(capitalize(bundle.getString(LANGUAGE + DOT + PreferencesUtil.getPreference(LANGUAGE,\r\n                ENGLISH).toLowerCase())));\r\n\r\n        String logPath = PreferencesUtil.getPreference(LOG_FILE_PATH, DEFAULT_LOG_PATH);\r\n        logFilePathTextField.setText(\"\".equals(logPath) ? PreferencesUtil.getDefaultLogPath() : logPath);\r\n\r\n        leftKeyComboBox.setValue(PreferencesUtil.getPreference(LEFT_KEY, LEFT_ARROW));\r\n        rightKeyComboBox.setValue(PreferencesUtil.getPreference(RIGHT_KEY, RIGHT_ARROW));\r\n    }\r\n\r\n    private void updateTexts() {\r\n        setMultilingualElement(gameModeLabel, GAME_MODE);\r\n        setMultilingualElement(difficultyLabel, DIFFICULTY);\r\n        setMultilingualElement(textureLabel, TEXTURE);\r\n        setMultilingualElement(logFilePathLabel, LOG_FILE_PATH);\r\n        setMultilingualElement(languageLabel, LANGUAGE);\r\n        setMultilingualElement(leftKeyLabel, LEFT_KEY);\r\n        setMultilingualElement(rightKeyLabel, RIGHT_KEY);\r\n        setMultilingualElement(saveButton, SAVE);\r\n        setMultilingualElement(backToMainMenuButton, BACK_TO_MAIN_MENU);\r\n        setMultilingualElement(chooseDirectoryButton, CHOOSE_DIRECTORY);\r\n    }\r\n\r\n    private void loadComboBoxItems() {\r\n        ResourceBundle bundle = getBundle();\r\n\r\n        gameModeComboBox.getItems()\r\n                .addAll(Arrays.stream(GameMode.values())\r\n                        .map(mode -> capitalize(bundle.getString(GAME_MODE + DOT + mode.getValue().toLowerCase())))\r\n                        .toList());\r\n        difficultyComboBox.getItems()\r\n                .addAll(Arrays.stream(Difficulty.values())\r\n                        .map(difficulty -> capitalize(bundle.getString(DIFFICULTY + DOT + difficulty.getValue()\r\n                                .toLowerCase())))\r\n                        .toList());\r\n        textureComboBox.getItems()\r\n                .addAll(Arrays.stream(Texture.values())\r\n                        .map(texture -> capitalize(bundle.getString(TEXTURE + DOT + texture.getValue().toLowerCase())))\r\n                        .toList());\r\n        languageComboBox.getItems()\r\n                .addAll(Arrays.stream(Language.values())\r\n                        .map(language -> capitalize(bundle.getString(LANGUAGE + DOT + language.getValue()\r\n                                .toLowerCase())))\r\n                        .toList());\r\n        leftKeyComboBox.getItems().addAll(\"<\", \"A\", \"J\");\r\n        rightKeyComboBox.getItems().addAll(\">\", \"D\", \"L\");\r\n    }\r\n\r\n    @FXML\r\n    private void handleSaveButton(ActionEvent event) {\r\n        PreferencesUtil.setPreference(GAME_MODE, getEnglishValue(gameModeComboBox.getValue(), GameMode.values()));\r\n        PreferencesUtil.setPreference(DIFFICULTY, getEnglishValue(difficultyComboBox.getValue(), Difficulty.values()));\r\n        PreferencesUtil.setPreference(TEXTURE, getEnglishValue(textureComboBox.getValue(), Texture.values()));\r\n        PreferencesUtil.setPreference(LOG_FILE_PATH, logFilePathTextField.getText());\r\n        PreferencesUtil.setPreference(LANGUAGE, getEnglishValue(languageComboBox.getValue(), Language.values()));\r\n        PreferencesUtil.setPreference(LEFT_KEY, leftKeyComboBox.getValue());\r\n        PreferencesUtil.setPreference(RIGHT_KEY, rightKeyComboBox.getValue());\r\n\r\n        applyTexture();\r\n\r\n        handleBackToMainMenuButton(event);\r\n    }\r\n\r\n    private <T extends Enum<T> & Localizable> String getEnglishValue(String localizedValue, T[] values) {\r\n        ResourceBundle currentBundle = getBundle();\r\n        ResourceBundle englishBundle = ResourceBundle.getBundle(MESSAGES, new Locale(\"en\"));\r\n\r\n        // First, it looks at the localized value in the current language resource file and looks for the corresponding key\r\n        for (T value : values) {\r\n            String localizedKey = value.getKey();\r\n            if (currentBundle.containsKey(localizedKey) && capitalize(currentBundle.getString(localizedKey)).equals(localizedValue)) {\r\n                // Use this key in the English resource file to return the English value\r\n                return englishBundle.getString(localizedKey);\r\n            }\r\n        }\r\n\r\n        // If this is not found in the current language resource file, look for it in the English resource file\r\n        for (T value : values) {\r\n            String localizedKey = value.getKey();\r\n            if (englishBundle.containsKey(localizedKey) && capitalize(englishBundle.getString(localizedKey)).equals(localizedValue)) {\r\n                return englishBundle.getString(localizedKey);\r\n            }\r\n        }\r\n\r\n        return localizedValue; // Returns the original value if there is no match at all\r\n    }\r\n\r\n    private void applyTexture() {\r\n        initializeLocalizedToEnumTextureMap();\r\n        String selectedTexture = textureComboBox.getValue();\r\n        if (selectedTexture != null) {\r\n            try {\r\n                String textureEnumName = getTextureEnumName(selectedTexture);\r\n                Texture texture = Texture.valueOf(textureEnumName);\r\n                PreferencesUtil.setTexture(texture);\r\n                applyUserStylesheet();\r\n            } catch (IllegalArgumentException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleChooseLogDirectoryButton() {\r\n        DirectoryChooser directoryChooser = new DirectoryChooser();\r\n        setMultilingualElement(directoryChooser, CHOOSE_DIRECTORY);\r\n        File selectedDirectory = directoryChooser.showDialog(logFilePathTextField.getScene().getWindow());\r\n        if (selectedDirectory != null) {\r\n            logFilePathTextField.setText(selectedDirectory.getAbsolutePath());\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleBackToMainMenuButton(ActionEvent event) {\r\n        navigateTo(MAIN_MENU, event);\r\n    }\r\n\r\n    public void switchLanguageAndUpdateComboBoxDisplay(String newLanguage) {\r\n        // Update the language preference\r\n        PreferencesUtil.setPreference(LANGUAGE, capitalize(getEnglishValue(newLanguage, Language.values())));\r\n\r\n        // Reload the resource bundle to reflect the new language\r\n        ResourceBundle.clearCache();\r\n        getBundle();\r\n\r\n        // Temporarily disable the listener\r\n        if (languageChangeListener != null) {\r\n            languageComboBox.valueProperty().removeListener(languageChangeListener);\r\n        }\r\n\r\n        // Update the UI texts\r\n        updateTexts();\r\n\r\n        // Update the ComboBox items\r\n        updateComboBoxItems();\r\n\r\n        // Re-enable the listener\r\n        languageComboBox.valueProperty().addListener(languageChangeListener);\r\n    }\r\n\r\n    private void updateComboBoxItems() {\r\n        ResourceBundle bundle = getBundle();\r\n\r\n        gameModeComboBox.getItems().clear();\r\n        gameModeComboBox.getItems()\r\n                .addAll(Arrays.stream(GameMode.values())\r\n                        .map(mode -> capitalize(bundle.getString(\"gameMode.\" + mode.getValue().toLowerCase())))\r\n                        .toList());\r\n        String gameModePreference = PreferencesUtil.getPreference(GAME_MODE, GameMode.NORMAL.getValue().toLowerCase())\r\n                .toLowerCase();\r\n        gameModeComboBox.setValue(capitalize(bundle.getString(\"gameMode.\" + gameModePreference)));\r\n\r\n        difficultyComboBox.getItems().clear();\r\n        difficultyComboBox.getItems()\r\n                .addAll(Arrays.stream(Difficulty.values())\r\n                        .map(difficulty -> capitalize(bundle.getString(\"difficulty.\" + difficulty.getValue()\r\n                                .toLowerCase())))\r\n                        .toList());\r\n        String difficultyPreference = PreferencesUtil.getPreference(DIFFICULTY,\r\n                Difficulty.EASY.getValue().toLowerCase()).toLowerCase();\r\n        difficultyComboBox.setValue(capitalize(bundle.getString(\"difficulty.\" + difficultyPreference)));\r\n\r\n        textureComboBox.getItems().clear();\r\n        textureComboBox.getItems()\r\n                .addAll(Arrays.stream(Texture.values())\r\n                        .map(texture -> capitalize(bundle.getString(\"texture.\" + texture.getValue().toLowerCase())))\r\n                        .toList());\r\n        String texturePreference = PreferencesUtil.getTexture().getValue().toLowerCase();\r\n        textureComboBox.setValue(capitalize(bundle.getString(\"texture.\" + texturePreference)));\r\n\r\n        languageComboBox.getItems().clear();\r\n        languageComboBox.getItems()\r\n                .addAll(Arrays.stream(Language.values())\r\n                        .map(language -> capitalize(bundle.getString(\"language.\" + language.getValue().toLowerCase())))\r\n                        .toList());\r\n        String languagePreference = PreferencesUtil.getPreference(LANGUAGE, ENGLISH.toLowerCase()).toLowerCase();\r\n        languageComboBox.setValue(capitalize(bundle.getString(\"language.\" + languagePreference)));\r\n    }\r\n\r\n    private String capitalize(String str) {\r\n        if (str == null || str.isEmpty()) {\r\n            return str;\r\n        }\r\n        return str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase();\r\n    }\r\n\r\n    private String getTextureEnumName(String localizedName) {\r\n        String enumName = localizedToEnumTextureMap.get(localizedName);\r\n        if (enumName == null) {\r\n            throw new IllegalArgumentException(\"No matching texture enum found for: \" + localizedName);\r\n        }\r\n        return enumName;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/SettingsController.java b/src/main/java/controller/SettingsController.java
--- a/src/main/java/controller/SettingsController.java	
+++ b/src/main/java/controller/SettingsController.java	
@@ -9,12 +9,12 @@
 import javafx.scene.control.Label;
 import javafx.scene.control.TextField;
 import javafx.stage.DirectoryChooser;
-import utils.Difficulty;
-import utils.GameMode;
-import utils.Language;
-import utils.Localizable;
-import utils.PreferencesUtil;
-import utils.Texture;
+import util.Difficulty;
+import util.GameMode;
+import util.Language;
+import util.Localizable;
+import util.PreferencesUtil;
+import util.Texture;
 
 import java.io.File;
 import java.net.URL;
@@ -24,9 +24,9 @@
 import java.util.Map;
 import java.util.ResourceBundle;
 
-import static utils.FXMLPaths.MAIN_MENU;
-import static utils.ResourcePaths.DEFAULT_LOG_PATH;
-import static utils.SceneConstants.*;
+import static util.FXMLPaths.MAIN_MENU;
+import static util.ResourcePaths.DEFAULT_LOG_DIRECTORY;
+import static util.SceneConstants.*;
 
 public class SettingsController extends BaseController implements Initializable {
 
@@ -122,8 +122,8 @@
         languageComboBox.setValue(capitalize(bundle.getString(LANGUAGE + DOT + PreferencesUtil.getPreference(LANGUAGE,
                 ENGLISH).toLowerCase())));
 
-        String logPath = PreferencesUtil.getPreference(LOG_FILE_PATH, DEFAULT_LOG_PATH);
-        logFilePathTextField.setText("".equals(logPath) ? PreferencesUtil.getDefaultLogPath() : logPath);
+        String logPath = PreferencesUtil.getPreference(LOG_FILE_PATH, DEFAULT_LOG_DIRECTORY);
+        logFilePathTextField.setText(("".equals(logPath) || DEFAULT_LOG_DIRECTORY.equals(logPath)) ? PreferencesUtil.getDefaultLogPath() : logPath);
 
         leftKeyComboBox.setValue(PreferencesUtil.getPreference(LEFT_KEY, LEFT_ARROW));
         rightKeyComboBox.setValue(PreferencesUtil.getPreference(RIGHT_KEY, RIGHT_ARROW));
@@ -189,7 +189,8 @@
         // First, it looks at the localized value in the current language resource file and looks for the corresponding key
         for (T value : values) {
             String localizedKey = value.getKey();
-            if (currentBundle.containsKey(localizedKey) && capitalize(currentBundle.getString(localizedKey)).equals(localizedValue)) {
+            if (currentBundle.containsKey(localizedKey) && capitalize(currentBundle.getString(localizedKey)).equals(
+                    localizedValue)) {
                 // Use this key in the English resource file to return the English value
                 return englishBundle.getString(localizedKey);
             }
@@ -198,7 +199,8 @@
         // If this is not found in the current language resource file, look for it in the English resource file
         for (T value : values) {
             String localizedKey = value.getKey();
-            if (englishBundle.containsKey(localizedKey) && capitalize(englishBundle.getString(localizedKey)).equals(localizedValue)) {
+            if (englishBundle.containsKey(localizedKey) && capitalize(englishBundle.getString(localizedKey)).equals(
+                    localizedValue)) {
                 return englishBundle.getString(localizedKey);
             }
         }
@@ -265,37 +267,38 @@
         gameModeComboBox.getItems().clear();
         gameModeComboBox.getItems()
                 .addAll(Arrays.stream(GameMode.values())
-                        .map(mode -> capitalize(bundle.getString("gameMode." + mode.getValue().toLowerCase())))
+                        .map(mode -> capitalize(bundle.getString(GAME_MODE + DOT + mode.getValue().toLowerCase())))
                         .toList());
         String gameModePreference = PreferencesUtil.getPreference(GAME_MODE, GameMode.NORMAL.getValue().toLowerCase())
                 .toLowerCase();
-        gameModeComboBox.setValue(capitalize(bundle.getString("gameMode." + gameModePreference)));
+        gameModeComboBox.setValue(capitalize(bundle.getString(GAME_MODE + DOT + gameModePreference)));
 
         difficultyComboBox.getItems().clear();
         difficultyComboBox.getItems()
                 .addAll(Arrays.stream(Difficulty.values())
-                        .map(difficulty -> capitalize(bundle.getString("difficulty." + difficulty.getValue()
+                        .map(difficulty -> capitalize(bundle.getString(DIFFICULTY + DOT + difficulty.getValue()
                                 .toLowerCase())))
                         .toList());
         String difficultyPreference = PreferencesUtil.getPreference(DIFFICULTY,
                 Difficulty.EASY.getValue().toLowerCase()).toLowerCase();
-        difficultyComboBox.setValue(capitalize(bundle.getString("difficulty." + difficultyPreference)));
+        difficultyComboBox.setValue(capitalize(bundle.getString(DIFFICULTY + DOT + difficultyPreference)));
 
         textureComboBox.getItems().clear();
         textureComboBox.getItems()
                 .addAll(Arrays.stream(Texture.values())
-                        .map(texture -> capitalize(bundle.getString("texture." + texture.getValue().toLowerCase())))
+                        .map(texture -> capitalize(bundle.getString(TEXTURE + DOT + texture.getValue().toLowerCase())))
                         .toList());
         String texturePreference = PreferencesUtil.getTexture().getValue().toLowerCase();
-        textureComboBox.setValue(capitalize(bundle.getString("texture." + texturePreference)));
+        textureComboBox.setValue(capitalize(bundle.getString(TEXTURE + DOT + texturePreference)));
 
         languageComboBox.getItems().clear();
         languageComboBox.getItems()
                 .addAll(Arrays.stream(Language.values())
-                        .map(language -> capitalize(bundle.getString("language." + language.getValue().toLowerCase())))
+                        .map(language -> capitalize(bundle.getString(LANGUAGE + DOT + language.getValue()
+                                .toLowerCase())))
                         .toList());
         String languagePreference = PreferencesUtil.getPreference(LANGUAGE, ENGLISH.toLowerCase()).toLowerCase();
-        languageComboBox.setValue(capitalize(bundle.getString("language." + languagePreference)));
+        languageComboBox.setValue(capitalize(bundle.getString(LANGUAGE + DOT + languagePreference)));
     }
 
     private String capitalize(String str) {
Index: src/main/java/controller/BaseController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport exceptions.HashException;\r\nimport exceptions.ResourceNotFoundException;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.Event;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.control.Labeled;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.image.Image;\r\nimport javafx.stage.DirectoryChooser;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.Window;\r\nimport model.user.User;\r\nimport utils.LoggerUtil;\r\nimport utils.PreferencesUtil;\r\nimport utils.Texture;\r\nimport utils.UserRole;\r\nimport utils.UserSession;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.URL;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.util.Locale;\r\nimport java.util.ResourceBundle;\r\n\r\nimport static utils.FXMLPaths.ADMIN;\r\nimport static utils.FXMLPaths.GAME_OVER;\r\nimport static utils.FXMLPaths.MAIN_MENU;\r\nimport static utils.ResourcePaths.IMAGE_ICON_PNG;\r\nimport static utils.SceneConstants.ENGLISH;\r\nimport static utils.SceneConstants.LANGUAGE;\r\nimport static utils.SceneConstants.MESSAGES;\r\n\r\npublic abstract class BaseController implements Initializable {\r\n\r\n    private final String username = UserSession.getInstance().getUsername();\r\n\r\n    @FXML\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        applyUserStylesheet();\r\n    }\r\n\r\n    protected void applyUserStylesheet() {\r\n        Texture texture = PreferencesUtil.getTexture();\r\n        LoggerUtil.logDebug(\"Applying texture: \" + texture.getValue());\r\n        for (Window window : Window.getWindows()) {\r\n            if (window instanceof Stage stage) {\r\n                Scene scene = stage.getScene();\r\n                // Skip the StartController stage\r\n                if (scene != null && scene.getRoot().getUserData() != null && scene.getRoot().getUserData().equals(\"StartPage\")) {\r\n                    LoggerUtil.logDebug(\"Skipping StartPage scene\");\r\n                    continue;\r\n                }\r\n                if (scene != null) {\r\n                    LoggerUtil.logDebug(\"Applying stylesheet to scene: \" + scene);\r\n                    applyUserStylesheet(scene, texture);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void applyUserStylesheet(Scene scene, Texture texture) {\r\n        LoggerUtil.logDebug(\"Clearing current stylesheets\");\r\n        scene.getStylesheets().clear();\r\n        URL cssFile = getClass().getResource(\"/view/\" + texture.getCssFile());\r\n        if (cssFile != null) {\r\n            LoggerUtil.logDebug(\"Found CSS file: \" + cssFile.toExternalForm());\r\n            scene.getStylesheets().add(cssFile.toExternalForm());\r\n            LoggerUtil.logDebug(\"Applied stylesheet: \" + cssFile.toExternalForm());\r\n            forceSceneUpdate(scene);\r\n        } else {\r\n            LoggerUtil.logSevere(\"CSS file not found: \" + texture.getCssFile());\r\n        }\r\n    }\r\n\r\n    private void forceSceneUpdate(Scene scene) {\r\n        // This forces a re-render of the scene, which can sometimes help with style changes.\r\n        scene.getRoot().applyCss();\r\n        scene.getRoot().layout();\r\n    }\r\n\r\n    protected String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    protected void navigateTo(String fxmlFile, Event event) {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlFile));\r\n            Scene scene = new Scene(loader.load(), 800, 600);\r\n            Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\r\n            stage.getIcons().add(loadImage(IMAGE_ICON_PNG));\r\n            stage.setScene(scene);\r\n            stage.setResizable(false);\r\n            LoggerUtil.logDebug(\"Navigated to: \" + fxmlFile);\r\n            applyUserStylesheet(scene, PreferencesUtil.getTexture()); // Apply styles on navigation\r\n        } catch (IOException e) {\r\n            LoggerUtil.logSevere(\"Failed to navigate to: \" + fxmlFile);\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    protected void navigateTo(String fxmlFile, Canvas gameCanvas) {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlFile));\r\n            Scene scene = new Scene(loader.load(), 800, 600);\r\n            Stage stage = (Stage) gameCanvas.getScene().getWindow();\r\n            stage.setScene(scene);\r\n            stage.setResizable(false);\r\n            LoggerUtil.logDebug(\"Navigated to: \" + fxmlFile);\r\n            applyUserStylesheet(scene, PreferencesUtil.getTexture()); // Apply styles on navigation\r\n        } catch (IOException e) {\r\n            LoggerUtil.logSevere(\"Failed to navigate to: \" + fxmlFile);\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    protected FXMLLoader navigateToDialog(String fxmlFile, ActionEvent event) throws IOException {\r\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlFile));\r\n        Stage dialogStage = new Stage();\r\n        dialogStage.getIcons().add(loadImage(IMAGE_ICON_PNG));\r\n        dialogStage.setScene(new Scene(loader.load()));\r\n        dialogStage.initModality(Modality.WINDOW_MODAL);\r\n        dialogStage.initOwner(((javafx.scene.Node) event.getSource()).getScene().getWindow());\r\n        dialogStage.setResizable(false);\r\n        applyUserStylesheet(dialogStage.getScene(), PreferencesUtil.getTexture()); // Apply styles on navigation\r\n        dialogStage.showAndWait();\r\n        return loader;\r\n    }\r\n\r\n    protected void navigateByRole(User user, TextField usernameField) throws IOException {\r\n        FXMLLoader loader;\r\n        if (user.getRole().equals(UserRole.ADMIN.value())) {\r\n            loader = new FXMLLoader(getClass().getResource(ADMIN));\r\n        } else {\r\n            loader = new FXMLLoader(getClass().getResource(MAIN_MENU));\r\n        }\r\n        Scene scene = new Scene(loader.load(), 800, 600);\r\n\r\n        Stage stage = (Stage) usernameField.getScene().getWindow();\r\n        stage.setScene(scene);\r\n        stage.setResizable(false);\r\n        applyUserStylesheet(scene, PreferencesUtil.getTexture()); // Apply styles on navigation\r\n        LoggerUtil.logInfo(\"User logged in: \" + user.getUsername());\r\n    }\r\n\r\n    protected void showGameOverScreen(int score, Canvas gameCanvas) {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(GAME_OVER));\r\n            Scene scene = new Scene(loader.load(), 800, 600);\r\n            GameOverController controller = loader.getController();\r\n            controller.setScore(score);\r\n            Stage stage = (Stage) gameCanvas.getScene().getWindow();\r\n            stage.setScene(scene);\r\n            stage.setResizable(false);\r\n            applyUserStylesheet(scene, PreferencesUtil.getTexture()); // Apply styles on navigation\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    protected String hashPassword(String password) throws HashException {\r\n        try {\r\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\r\n            byte[] hash = md.digest(password.getBytes());\r\n            StringBuilder hexString = new StringBuilder();\r\n            for (byte b : hash) {\r\n                String hex = Integer.toHexString(0xff & b);\r\n                if (hex.length() == 1) hexString.append('0');\r\n                hexString.append(hex);\r\n            }\r\n            return hexString.toString();\r\n        } catch (NoSuchAlgorithmException e) {\r\n            LoggerUtil.logSevere(\"Error hashing password\");\r\n            throw new HashException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    protected Image loadImage(String path) {\r\n        InputStream inputStream = getClass().getResourceAsStream(path);\r\n        if (inputStream == null) {\r\n            throw new ResourceNotFoundException(\"Resource not found: \" + path + \" in classpath: \" + System.getProperty(\r\n                    \"java.class.path\"));\r\n        }\r\n        return new Image(inputStream);\r\n    }\r\n\r\n    protected void setMultilingualElement(Labeled element, String text) {\r\n        element.setText(getBundle().getString(text));\r\n    }\r\n\r\n    protected void setMultilingualElement(TableColumn<?, ?> column, String text) {\r\n        String string = getBundle().getString(text);\r\n        column.setText(string);\r\n    }\r\n\r\n    protected void setMultilingualPromptElement(PasswordField element, String text) {\r\n        element.setPromptText(getBundle().getString(text));\r\n    }\r\n\r\n    protected void setMultilingualElement(Labeled element, String text, String additional) {\r\n        element.setText(getBundle().getString(text) + additional);\r\n    }\r\n\r\n    protected void setMultilingualElement(DirectoryChooser directoryChooser, String text) {\r\n        directoryChooser.setTitle(getBundle().getString(text));\r\n    }\r\n\r\n    ResourceBundle getBundle() {\r\n            String language = PreferencesUtil.getPreference(LANGUAGE, ENGLISH);\r\n            String languageCode = getLanguageCode(language);\r\n            Locale locale = new Locale(languageCode);\r\n            return ResourceBundle.getBundle(MESSAGES, locale);\r\n    }\r\n\r\n    private String getLanguageCode(String language) {\r\n        return switch (language.toLowerCase()) {\r\n            case \"hungarian\", \"magyar\" -> \"hu\";\r\n            default -> \"en\";\r\n        };\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/BaseController.java b/src/main/java/controller/BaseController.java
--- a/src/main/java/controller/BaseController.java	
+++ b/src/main/java/controller/BaseController.java	
@@ -1,7 +1,7 @@
 package controller;
 
-import exceptions.HashException;
-import exceptions.ResourceNotFoundException;
+import exception.HashException;
+import exception.ResourceNotFoundException;
 import javafx.event.ActionEvent;
 import javafx.event.Event;
 import javafx.fxml.FXML;
@@ -19,11 +19,11 @@
 import javafx.stage.Stage;
 import javafx.stage.Window;
 import model.user.User;
-import utils.LoggerUtil;
-import utils.PreferencesUtil;
-import utils.Texture;
-import utils.UserRole;
-import utils.UserSession;
+import util.LoggerUtil;
+import util.PreferencesUtil;
+import util.Texture;
+import util.UserRole;
+import util.UserSession;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -33,13 +33,14 @@
 import java.util.Locale;
 import java.util.ResourceBundle;
 
-import static utils.FXMLPaths.ADMIN;
-import static utils.FXMLPaths.GAME_OVER;
-import static utils.FXMLPaths.MAIN_MENU;
-import static utils.ResourcePaths.IMAGE_ICON_PNG;
-import static utils.SceneConstants.ENGLISH;
-import static utils.SceneConstants.LANGUAGE;
-import static utils.SceneConstants.MESSAGES;
+import static util.FXMLPaths.ADMIN;
+import static util.FXMLPaths.GAME_OVER;
+import static util.FXMLPaths.MAIN_MENU;
+import static util.ResourcePaths.BASE_STYLE_FOLDER;
+import static util.ResourcePaths.IMAGE_ICON_PNG;
+import static util.SceneConstants.ENGLISH;
+import static util.SceneConstants.LANGUAGE;
+import static util.SceneConstants.MESSAGES;
 
 public abstract class BaseController implements Initializable {
 
@@ -72,7 +73,7 @@
     private void applyUserStylesheet(Scene scene, Texture texture) {
         LoggerUtil.logDebug("Clearing current stylesheets");
         scene.getStylesheets().clear();
-        URL cssFile = getClass().getResource("/view/" + texture.getCssFile());
+        URL cssFile = getClass().getResource(BASE_STYLE_FOLDER + texture.getCssFile());
         if (cssFile != null) {
             LoggerUtil.logDebug("Found CSS file: " + cssFile.toExternalForm());
             scene.getStylesheets().add(cssFile.toExternalForm());
Index: src/main/java/utils/LoggerUtil.java
===================================================================
diff --git a/src/main/java/utils/LoggerUtil.java b/src/main/java/utils/LoggerUtil.java
deleted file mode 100644
--- a/src/main/java/utils/LoggerUtil.java	
+++ /dev/null	
@@ -1,141 +0,0 @@
-package utils;
-
-import javafx.application.Platform;
-import javafx.scene.control.TextArea;
-
-import java.io.File;
-import java.io.IOException;
-import java.nio.file.AccessDeniedException;
-import java.nio.file.Files;
-import java.nio.file.Paths;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.logging.*;
-
-import static utils.ResourcePaths.DEFAULT_LOG_PATH;
-import static utils.SceneConstants.LOG_FILE_PATH;
-
-public class LoggerUtil {
-    private LoggerUtil() {
-        // empty constructor
-    }
-
-    private static final Logger logger = Logger.getLogger(LoggerUtil.class.getName());
-    private static TextArea logTextArea;
-    private static FileHandler fileHandler;
-
-    public static void setLogTextArea(TextArea textArea) {
-        logTextArea = textArea;
-    }
-
-    public static void configureLogger() {
-        Logger rootLogger = Logger.getLogger("");
-        Handler[] handlers = rootLogger.getHandlers();
-        for (Handler handler : handlers) {
-            rootLogger.removeHandler(handler);
-        }
-
-        if (fileHandler != null) {
-            logger.removeHandler(fileHandler);
-            fileHandler.close();
-        }
-
-        try {
-            // Get current date and time for unique log file name
-            String timeStamp = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
-            String logDirectoryPath = getLogDirectory();
-            String logFileName = logDirectoryPath + File.separator + "game_" + timeStamp + ".txt";
-
-            // Check if the directory is writable
-            File logDirectory = new File(logDirectoryPath);
-            if (logDirectoryPath.equals(DEFAULT_LOG_PATH) && !logDirectory.exists()) {
-                boolean isDirectoryCreated = logDirectory.mkdirs();
-                if (!isDirectoryCreated) {
-                    throw new AccessDeniedException("Cannot create log directory: " + logDirectoryPath);
-                }
-            } else if (!logDirectoryPath.equals(DEFAULT_LOG_PATH) && !logDirectory.exists()) {
-                setDefaultLogDirectory();
-                configureLogger();
-                return;
-            }
-
-            if (!Files.isWritable(logDirectory.toPath())) {
-                throw new AccessDeniedException("Log directory is not writable: " + logDirectoryPath);
-            }
-
-            // Configure the logger with handler and formatter
-            setHandlerFormatter(logFileName);
-        } catch (AccessDeniedException e) {
-            String fallbackLogDirectory = System.getProperty("user.home") + File.separator + "logs";
-            configureFallbackLogger(fallbackLogDirectory);
-            logSevere("Access denied to log directory: " + e.getMessage() + ". Using fallback directory: " + fallbackLogDirectory);
-        } catch (IOException e) {
-            logSevere("Error occurred in FileHandler: " + e.getMessage());
-        }
-    }
-
-    public static void setDefaultLogDirectory() {
-        PreferencesUtil.setPreference(LOG_FILE_PATH, DEFAULT_LOG_PATH);
-    }
-
-    private static void configureFallbackLogger(String fallbackLogDirectory) {
-        try {
-            // Get current date and time for unique log file name
-            String timeStamp = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
-            String logFileName = fallbackLogDirectory + File.separator + "game_" + timeStamp + ".txt";
-
-            // Create fallback directory if it does not exist
-            Files.createDirectories(Paths.get(fallbackLogDirectory));
-
-            // Configure the logger with handler and formatter
-            setHandlerFormatter(logFileName);
-
-        } catch (IOException e) {
-            logSevere("Error occurred in FileHandler with fallback directory: " + e.getMessage());
-        }
-    }
-
-    private static void setHandlerFormatter(String logFileName) throws IOException {
-        // Configure the logger with handler and formatter
-        fileHandler = new FileHandler(logFileName, true);
-        fileHandler.setFormatter(new SimpleFormatter());
-        fileHandler.setLevel(Level.ALL);
-        logger.addHandler(fileHandler);
-
-        // Set console handler level to INFO to log INFO, WARNING, and SEVERE levels of messages to the console
-        ConsoleHandler consoleHandler = new ConsoleHandler();
-        consoleHandler.setLevel(Level.INFO);
-        consoleHandler.setFilter(logRecord -> logRecord.getLevel().intValue() >= Level.INFO.intValue());
-        logger.addHandler(consoleHandler);
-
-        // Ensure logger level is set to ALL so that all messages are logged
-        logger.setLevel(Level.ALL);
-    }
-
-    public static String getLogDirectory() {
-        return PreferencesUtil.getPreference(LOG_FILE_PATH, DEFAULT_LOG_PATH);
-    }
-
-    public static void logInfo(String message) {
-        log(message, Level.INFO);
-    }
-
-    public static void logWarning(String message) {
-        log(message, Level.WARNING);
-    }
-
-    public static void logSevere(String message) {
-        log(message, Level.SEVERE);
-    }
-
-    public static void logDebug(String message) {
-        log(message, Level.FINE);
-    }
-
-    private static void log(String message, Level level) {
-        logger.log(level, message);
-        if (logTextArea != null && level.intValue() >= Level.INFO.intValue()) {
-            Platform.runLater(() -> logTextArea.appendText(level.getLocalizedName() + ": " + message + "\n"));
-        }
-    }
-}
Index: src/main/java/utils/UserRole.java
===================================================================
diff --git a/src/main/java/utils/UserRole.java b/src/main/java/utils/UserRole.java
deleted file mode 100644
--- a/src/main/java/utils/UserRole.java	
+++ /dev/null	
@@ -1,13 +0,0 @@
-package utils;
-
-public enum UserRole {
-    ADMIN("admin"),
-    USER("user");
-
-    private final String role;
-    UserRole(final String role) {
-        this.role = role;
-    }
-
-    public String value() { return this.role; }
-}
Index: src/main/java/utils/SceneConstants.java
===================================================================
diff --git a/src/main/java/utils/SceneConstants.java b/src/main/java/utils/SceneConstants.java
deleted file mode 100644
--- a/src/main/java/utils/SceneConstants.java	
+++ /dev/null	
@@ -1,68 +0,0 @@
-package utils;
-
-public class SceneConstants {
-
-    private SceneConstants() {}
-
-    public static final String FRUIT_CATCHER = "Fruit Catcher";
-    public static final String DOT = ".";
-    public static final String TOP_SCORES = "topScores";
-    public static final String REGISTER = "register";
-    public static final String PASSWORD_STRENGTH = "passwordStrength";
-    public static final String PASSWORD = "password";
-    public static final String CONFIRM_PASSWORD = "confirmPassword";
-    public static final String BACK_TO_LOGIN = "backToLogin";
-    public static final String SCORE = "score";
-    public static final String TIMER = "timer";
-    public static final String BACKGROUND = "background";
-    public static final String MUSIC = "music";
-    public static final String PAUSE = "pause";
-    public static final String QUIT = "quit";
-    public static final String MESSAGES = "messages";
-    public static final String GAME_MODE = "gameMode";
-    public static final String DIFFICULTY = "difficulty";
-    public static final String TEXTURE = "texture";
-    public static final String LOG_FILE_PATH = "logFilePath";
-    public static final String LANGUAGE = "language";
-    public static final String LEFT_KEY = "leftKey";
-    public static final String RIGHT_KEY = "rightKey";
-    public static final String SAVE = "save";
-    public static final String BACK_TO_MAIN_MENU = "backToMainMenu";
-    public static final String CHOOSE_DIRECTORY = "chooseDirectory";
-    public static final String LEFT_ARROW = "<";
-    public static final String RIGHT_ARROW = ">";
-    public static final String LEFT = "LEFT";
-    public static final String RIGHT = "RIGHT";
-    public static final String ENGLISH = "English";
-    public static final String LOGGED_IN_AS = "loggedInAs";
-    public static final String START_GAME = "startGame";
-    public static final String DESCRIPTION = "description";
-    public static final String PLAYER_RESULTS = "playerResults";
-    public static final String PLAYER_RANKINGS = "playerRankings";
-    public static final String SETTINGS = "settings";
-    public static final String CHANGE_PASSWORD = "changePassword";
-    public static final String LOGOUT = "logout";
-    public static final String DELETE_ACCOUNT = "deleteAccount";
-    public static final String TIMESTAMP = "timestamp";
-    public static final String YES = "yes";
-    public static final String NO = "no";
-    public static final String USERNAME = "username";
-    public static final String CURRENT_PASSWORD = "currentPassword";
-    public static final String CURRENT_PASSWORD_IS_INCORRECT = "incorrectCurrentPassword";
-    public static final String NEW_PASSWORD = "newPassword";
-    public static final String CONFIRM_NEW_PASSWORD = "confirmNewPassword";
-    public static final String CONFIRM_DELETE_ACCOUNT = "confirmDeleteAccount";
-    public static final String PASSWORDS_DO_NOT_MATCH = "passwordsDoNotMatch";
-    public static final String USERNAME_PASSWORD_AND_PASSWORD_REMINDER_CANNOT_BE_EMPTY = "emptyRegisterFields";
-    public static final String PASSWORD_IS_NOT_STRONG_ENOUGH = "notStrongPassword";
-    public static final String USERNAME_ALREADY_EXISTS = "usernameAlreadyExists";
-    public static final String AN_ERROR_OCCURRED_PLEASE_TRY_AGAIN = "unknownError";
-    public static final String DESC_FIRST = "descFirst";
-    public static final String DESC_SECOND = "descSecond";
-    public static final String DESC_THIRD = "descThird";
-    public static final String DISABLE_BACKGROUND = "disableBackground";
-    public static final String ENABLE_BACKGROUND = "enableBackground";
-    public static final String PLAY_MUSIC = "playMusic";
-    public static final String PAUSE_MUSIC = "pauseMusic";
-
-}
Index: src/main/java/utils/GameMode.java
===================================================================
diff --git a/src/main/java/utils/GameMode.java b/src/main/java/utils/GameMode.java
deleted file mode 100644
--- a/src/main/java/utils/GameMode.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package utils;
-
-public enum GameMode implements Localizable {
-    NORMAL("gameMode.normal", "Normal"),
-    FREEPLAY("gameMode.freeplay", "Freeplay"),
-    PLAYGROUND("gameMode.playground", "Playground");
-
-    private final String key;
-    private final String value;
-
-    GameMode(String key, String value) {
-        this.key = key;
-        this.value = value;
-    }
-
-    @Override
-    public String getKey() {
-        return key;
-    }
-
-    @Override
-    public String getValue() {
-        return value;
-    }
-}
Index: src/main/java/utils/Localizable.java
===================================================================
diff --git a/src/main/java/utils/Localizable.java b/src/main/java/utils/Localizable.java
deleted file mode 100644
--- a/src/main/java/utils/Localizable.java	
+++ /dev/null	
@@ -1,6 +0,0 @@
-package utils;
-
-public interface Localizable {
-    String getKey();
-    String getValue();
-}
Index: src/main/java/utils/Difficulty.java
===================================================================
diff --git a/src/main/java/utils/Difficulty.java b/src/main/java/utils/Difficulty.java
deleted file mode 100644
--- a/src/main/java/utils/Difficulty.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package utils;
-
-public enum Difficulty implements Localizable {
-    EASY("difficulty.easy", "Easy"),
-    MEDIUM("difficulty.medium", "Medium"),
-    HARD("difficulty.hard", "Hard");
-
-    private final String key;
-    private final String value;
-
-    Difficulty(String key, String value) {
-        this.key = key;
-        this.value = value;
-    }
-
-    @Override
-    public String getKey() {
-        return key;
-    }
-
-    @Override
-    public String getValue() {
-        return value;
-    }
-}
Index: src/main/java/utils/PasswordStrength.java
===================================================================
diff --git a/src/main/java/utils/PasswordStrength.java b/src/main/java/utils/PasswordStrength.java
deleted file mode 100644
--- a/src/main/java/utils/PasswordStrength.java	
+++ /dev/null	
@@ -1,14 +0,0 @@
-package utils;
-
-public enum PasswordStrength {
-    WEAK("Weak"),
-    MEDIUM("Medium"),
-    STRONG("Strong");
-
-    private final String strength;
-    PasswordStrength(final String strength) {
-        this.strength = strength;
-    }
-
-    public String value() { return this.strength; }
-}
Index: src/main/java/utils/PreferencesUtil.java
===================================================================
diff --git a/src/main/java/utils/PreferencesUtil.java b/src/main/java/utils/PreferencesUtil.java
deleted file mode 100644
--- a/src/main/java/utils/PreferencesUtil.java	
+++ /dev/null	
@@ -1,80 +0,0 @@
-package utils;
-
-import java.io.*;
-import java.util.Properties;
-
-import static utils.ResourcePaths.DEFAULT_LOG_PATH;
-import static utils.SceneConstants.*;
-
-public class PreferencesUtil {
-
-    private PreferencesUtil() {}
-    private static final String PREFERENCES_FILE = "user_preferences.properties";
-    private static final Properties properties = new Properties();
-
-    static {
-        loadProperties();
-    }
-
-    private static synchronized void loadProperties() {
-        File file = new File(PREFERENCES_FILE);
-        if (!file.exists()) {
-            try {
-                if (file.createNewFile()) {
-                    LoggerUtil.logDebug("New user preferences file created.");
-                }
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-        }
-        try (InputStream input = new FileInputStream(PREFERENCES_FILE)) {
-            properties.load(input);
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-    }
-
-    private static synchronized void saveProperties() {
-        try (OutputStream output = new FileOutputStream(PREFERENCES_FILE)) {
-            properties.store(output, null);
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-    }
-
-    public static synchronized void setPreference(String key, String value) {
-        properties.setProperty(UserSession.getInstance().getUsername() + DOT + key, value);
-        saveProperties();
-    }
-
-    public static synchronized String getPreference(String key, String defaultValue) {
-        return properties.getProperty(UserSession.getInstance().getUsername() + DOT + key, defaultValue);
-    }
-
-    public static String getDefaultLogPath() {
-        return new File(DEFAULT_LOG_PATH).getAbsolutePath();
-    }
-
-    public static synchronized void setDefaultPreferences(String username) {
-        loadProperties();
-        if (!properties.containsKey(username + DOT + GAME_MODE)) {
-            setPreference(GAME_MODE, GameMode.NORMAL.getValue());
-            setPreference(DIFFICULTY, Difficulty.EASY.getValue());
-            setPreference(LOG_FILE_PATH, "");
-            setPreference(TEXTURE, Texture.FOREST.getValue());
-            setPreference(LANGUAGE, ENGLISH);
-            setPreference(LEFT_KEY, LEFT_ARROW);
-            setPreference(RIGHT_KEY, RIGHT_ARROW);
-        }
-    }
-
-    public static synchronized void setTexture(Texture texture) {
-        setPreference(TEXTURE, texture.getValue());
-    }
-
-    public static synchronized Texture getTexture() {
-        String textureName = getPreference(TEXTURE, Texture.FOREST.getValue());
-        return Texture.valueOf(textureName.toUpperCase());
-    }
-
-}
Index: src/main/java/utils/Texture.java
===================================================================
diff --git a/src/main/java/utils/Texture.java b/src/main/java/utils/Texture.java
deleted file mode 100644
--- a/src/main/java/utils/Texture.java	
+++ /dev/null	
@@ -1,31 +0,0 @@
-package utils;
-
-public enum Texture implements Localizable {
-    FOREST("texture.forest", "Forest", "forest.css"),
-    RETRO("texture.retro", "Retro", "retro.css"),
-    FUTURISTIC("texture.futuristic", "Futuristic", "futuristic.css");
-
-    private final String key;
-    private final String value;
-    private final String cssFile;
-
-    Texture(String key, String value, String cssFile) {
-        this.key = key;
-        this.value = value;
-        this.cssFile = cssFile;
-    }
-
-    @Override
-    public String getKey() {
-        return key;
-    }
-
-    @Override
-    public String getValue() {
-        return value;
-    }
-
-    public String getCssFile() {
-        return cssFile;
-    }
-}
Index: src/main/java/utils/ConfigUtil.java
===================================================================
diff --git a/src/main/java/utils/ConfigUtil.java b/src/main/java/utils/ConfigUtil.java
deleted file mode 100644
--- a/src/main/java/utils/ConfigUtil.java	
+++ /dev/null	
@@ -1,44 +0,0 @@
-package utils;
-
-import exceptions.ConfigException;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Properties;
-
-public class ConfigUtil {
-
-    private ConfigUtil() {}
-
-    private static final String CONFIG_FILE = "config.properties";
-    private static final String TEST_CONFIG_FILE = "test.properties";
-    private static final Properties properties = new Properties();
-    private static final Properties testProperties = new Properties();
-
-    static {
-        loadProperties(CONFIG_FILE, properties);
-    }
-
-    public static void loadTestConfig() {
-        loadProperties(TEST_CONFIG_FILE, testProperties);
-    }
-
-    private static void loadProperties(String fileName, Properties props) {
-        try (InputStream input = ConfigUtil.class.getClassLoader().getResourceAsStream(fileName)) {
-            if (input == null) {
-                throw new ConfigException("Configuration file not found: " + fileName);
-            }
-            props.load(input);
-        } catch (IOException e) {
-            throw new ConfigException("Failed to load configuration from file: " + fileName, e);
-        }
-    }
-
-    public static String getConfig(String key) {
-        return properties.getProperty(key);
-    }
-
-    public static String getTestConfig(String key) {
-        return testProperties.getProperty(key);
-    }
-}
Index: src/main/java/utils/FXMLPaths.java
===================================================================
diff --git a/src/main/java/utils/FXMLPaths.java b/src/main/java/utils/FXMLPaths.java
deleted file mode 100644
--- a/src/main/java/utils/FXMLPaths.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package utils;
-
-public class FXMLPaths {
-    private FXMLPaths() {}
-    public static final String MAIN_MENU = "/view/mainMenu.fxml";
-    public static final String LOGIN = "/view/login.fxml";
-    public static final String START = "/view/start.fxml";
-    public static final String REGISTER = "/view/register.fxml";
-    public static final String GAME = "/view/game.fxml";
-    public static final String GAME_OVER = "/view/gameOver.fxml";
-    public static final String DESCRIPTION = "/view/description.fxml";
-    public static final String PLAYER_RESULTS = "/view/playerResults.fxml";
-    public static final String PLAYER_RANKINGS = "/view/playerRankings.fxml";
-    public static final String SETTINGS = "/view/settings.fxml";
-    public static final String CHANGE_PASSWORD = "/view/changePassword.fxml";
-    public static final String DELETE_ACCOUNT_CONFIRMATION = "/view/confirmationDialog.fxml";
-    public static final String ADMIN = "/view/admin.fxml";
-}
Index: src/main/java/utils/UserSession.java
===================================================================
diff --git a/src/main/java/utils/UserSession.java b/src/main/java/utils/UserSession.java
deleted file mode 100644
--- a/src/main/java/utils/UserSession.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package utils;
-
-public class UserSession {
-    private static UserSession instance;
-    private String username;
-
-    private UserSession() {
-        // Private constructor to prevent instantiation
-    }
-
-    public static UserSession getInstance() {
-        if (instance == null) {
-            instance = new UserSession();
-        }
-        return instance;
-    }
-
-    public String getUsername() {
-        return username;
-    }
-
-    public void setUsername(String username) {
-        this.username = username;
-    }
-}
Index: src/main/java/utils/Language.java
===================================================================
diff --git a/src/main/java/utils/Language.java b/src/main/java/utils/Language.java
deleted file mode 100644
--- a/src/main/java/utils/Language.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package utils;
-
-public enum Language implements Localizable {
-    ENGLISH("language.english", "English"),
-    HUNGARIAN("language.hungarian", "Hungarian");
-
-    private final String key;
-    private final String value;
-
-    Language(String key, String value) {
-        this.key = key;
-        this.value = value;
-    }
-
-    @Override
-    public String getKey() {
-        return key;
-    }
-
-    @Override
-    public String getValue() {
-        return value;
-    }
-
-}
Index: src/main/java/utils/ResourcePaths.java
===================================================================
diff --git a/src/main/java/utils/ResourcePaths.java b/src/main/java/utils/ResourcePaths.java
deleted file mode 100644
--- a/src/main/java/utils/ResourcePaths.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package utils;
-
-public class ResourcePaths {
-    private ResourcePaths() {}
-    public static final String IMAGE_ICON_PNG = "/image/icon.png";
-    public static final String IMAGE_BLACK_PNG = "/image/black.png";
-    public static final String IMAGE_CLOCK_PNG = "/image/clock.png";
-    public static final String IMAGE_FRUIT_PNG = "/image/fruit.png";
-    public static final String IMAGE_LEAF_PNG = "/image/leaf.png";
-    public static final String IMAGE_BONUS_PNG = "/image/bonus.png";
-    public static final String IMAGE_BASKET_PNG = "/image/basket.png";
-    public static final String IMAGE_CLOUD_1_PNG = "/image/cloud1.png";
-    public static final String IMAGE_CLOUD_2_PNG = "/image/cloud2.png";
-    public static final String IMAGE_CLOUD_3_PNG = "/image/cloud3.png";
-    public static final String SOUND_DEZERT_MP_3 = "/sound/dezert.mp3";
-    public static final String DEFAULT_LOG_PATH = "log";
-}
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/inspectionProfiles/Project_Default.xml	
@@ -0,0 +1,8 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="AutoCloseableResource" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="METHOD_MATCHER_CONFIG" value="java.util.Formatter,format,java.io.Writer,append,com.google.common.base.Preconditions,checkNotNull,org.hibernate.Session,close,java.io.PrintWriter,printf,java.io.PrintStream,printf,org.mockito.MockitoAnnotations,openMocks" />
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: src/main/java/util/Language.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/Language.java b/src/main/java/util/Language.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/Language.java	
@@ -0,0 +1,25 @@
+package util;
+
+public enum Language implements Localizable {
+    ENGLISH("language.english", "English"),
+    HUNGARIAN("language.hungarian", "Hungarian");
+
+    private final String key;
+    private final String value;
+
+    Language(String key, String value) {
+        this.key = key;
+        this.value = value;
+    }
+
+    @Override
+    public String getKey() {
+        return key;
+    }
+
+    @Override
+    public String getValue() {
+        return value;
+    }
+
+}
Index: src/main/java/main/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.stage.Stage;\r\nimport model.database.DatabaseInitializer;\r\n\r\nimport java.sql.SQLException;\r\nimport java.util.Objects;\r\n\r\nimport static utils.FXMLPaths.START;\r\nimport static utils.ResourcePaths.IMAGE_ICON_PNG;\r\nimport static utils.SceneConstants.FRUIT_CATCHER;\r\n\r\npublic class Main extends Application {\r\n        @Override\r\n    public void start(Stage primaryStage) throws Exception {\r\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(START));\r\n        Scene scene = new Scene(loader.load(), 800, 600);\r\n\r\n        primaryStage.getIcons().add(new Image(Objects.requireNonNull(getClass().getResourceAsStream(IMAGE_ICON_PNG))));\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(FRUIT_CATCHER);\r\n        primaryStage.setResizable(false);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            DatabaseInitializer.initializeDatabase();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        launch(args);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/main/Main.java b/src/main/java/main/Main.java
--- a/src/main/java/main/Main.java	
+++ b/src/main/java/main/Main.java	
@@ -10,9 +10,9 @@
 import java.sql.SQLException;
 import java.util.Objects;
 
-import static utils.FXMLPaths.START;
-import static utils.ResourcePaths.IMAGE_ICON_PNG;
-import static utils.SceneConstants.FRUIT_CATCHER;
+import static util.FXMLPaths.START;
+import static util.ResourcePaths.IMAGE_ICON_PNG;
+import static util.SceneConstants.FRUIT_CATCHER;
 
 public class Main extends Application {
         @Override
Index: src/main/java/controller/StartController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.event.Event;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.layout.BorderPane;\r\n\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\nimport static utils.FXMLPaths.LOGIN;\r\n\r\npublic class StartController extends BaseController implements Initializable {\r\n\r\n    @FXML\r\n    public BorderPane startPageRoot;\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        startPageRoot.setUserData(\"StartPage\");\r\n        startPageRoot.setOnKeyPressed(this::handleKeyPressed);\r\n    }\r\n\r\n    private void handleKeyPressed(KeyEvent event) {\r\n        if (event.getCode() == KeyCode.ENTER) {\r\n            handleStartButton(event);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleStartButton(Event event) {\r\n        navigateTo(LOGIN, event);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/StartController.java b/src/main/java/controller/StartController.java
--- a/src/main/java/controller/StartController.java	
+++ b/src/main/java/controller/StartController.java	
@@ -10,7 +10,7 @@
 import java.net.URL;
 import java.util.ResourceBundle;
 
-import static utils.FXMLPaths.LOGIN;
+import static util.FXMLPaths.LOGIN;
 
 public class StartController extends BaseController implements Initializable {
 
Index: src/main/java/model/Score.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/Score.java b/src/main/java/model/score/Score.java
rename from src/main/java/model/Score.java
rename to src/main/java/model/score/Score.java
--- a/src/main/java/model/Score.java	
+++ b/src/main/java/model/score/Score.java	
@@ -1,4 +1,4 @@
-package model;
+package model.score;
 
 public class Score {
     private String username;
Index: src/main/java/controller/GameOverController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Label;\r\n\r\nimport static utils.FXMLPaths.GAME;\r\nimport static utils.FXMLPaths.MAIN_MENU;\r\n\r\npublic class GameOverController extends BaseController {\r\n\r\n    @FXML\r\n    private Label scoreLabel;\r\n\r\n    private int score;\r\n\r\n    public void setScore(int score) {\r\n        this.score = score;\r\n        showScore();\r\n    }\r\n\r\n    private void showScore() {\r\n        scoreLabel.setText(\"Your Score: \" + score);\r\n    }\r\n\r\n    @FXML\r\n    private void handleNewGameButton(ActionEvent event) {\r\n        navigateTo(GAME, event);\r\n    }\r\n\r\n    @FXML\r\n    private void handleMainMenuButton(ActionEvent event) {\r\n        navigateTo(MAIN_MENU, event);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/GameOverController.java b/src/main/java/controller/GameOverController.java
--- a/src/main/java/controller/GameOverController.java	
+++ b/src/main/java/controller/GameOverController.java	
@@ -4,8 +4,8 @@
 import javafx.fxml.FXML;
 import javafx.scene.control.Label;
 
-import static utils.FXMLPaths.GAME;
-import static utils.FXMLPaths.MAIN_MENU;
+import static util.FXMLPaths.GAME;
+import static util.FXMLPaths.MAIN_MENU;
 
 public class GameOverController extends BaseController {
 
Index: src/main/java/exceptions/HashException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/exceptions/HashException.java b/src/main/java/exception/HashException.java
rename from src/main/java/exceptions/HashException.java
rename to src/main/java/exception/HashException.java
--- a/src/main/java/exceptions/HashException.java	
+++ b/src/main/java/exception/HashException.java	
@@ -1,4 +1,4 @@
-package exceptions;
+package exception;
 
 public class HashException extends Exception {
     public HashException(String message) {
Index: src/main/java/util/Difficulty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/Difficulty.java b/src/main/java/util/Difficulty.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/Difficulty.java	
@@ -0,0 +1,25 @@
+package util;
+
+public enum Difficulty implements Localizable {
+    EASY("difficulty.easy", "Easy"),
+    MEDIUM("difficulty.medium", "Medium"),
+    HARD("difficulty.hard", "Hard");
+
+    private final String key;
+    private final String value;
+
+    Difficulty(String key, String value) {
+        this.key = key;
+        this.value = value;
+    }
+
+    @Override
+    public String getKey() {
+        return key;
+    }
+
+    @Override
+    public String getValue() {
+        return value;
+    }
+}
Index: src/main/java/util/GameMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/GameMode.java b/src/main/java/util/GameMode.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/GameMode.java	
@@ -0,0 +1,25 @@
+package util;
+
+public enum GameMode implements Localizable {
+    NORMAL("gameMode.normal", "Normal"),
+    FREEPLAY("gameMode.freeplay", "Freeplay"),
+    PLAYGROUND("gameMode.playground", "Playground");
+
+    private final String key;
+    private final String value;
+
+    GameMode(String key, String value) {
+        this.key = key;
+        this.value = value;
+    }
+
+    @Override
+    public String getKey() {
+        return key;
+    }
+
+    @Override
+    public String getValue() {
+        return value;
+    }
+}
Index: src/main/java/util/PasswordStrength.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/PasswordStrength.java b/src/main/java/util/PasswordStrength.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/PasswordStrength.java	
@@ -0,0 +1,14 @@
+package util;
+
+public enum PasswordStrength {
+    WEAK("Weak"),
+    MEDIUM("Medium"),
+    STRONG("Strong");
+
+    private final String strength;
+    PasswordStrength(final String strength) {
+        this.strength = strength;
+    }
+
+    public String value() { return this.strength; }
+}
Index: src/main/java/model/user/UserDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.user;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport model.Score;\r\nimport model.database.Database;\r\nimport model.ranking.Ranking;\r\nimport utils.LoggerUtil;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class UserDAO {\r\n    public User getUser(String username, boolean isTest) throws SQLException {\r\n        String query = \"SELECT * FROM users WHERE username = ?\";\r\n        Connection connection = getConnection(isTest);\r\n        try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n            statement.setString(1, username);\r\n            ResultSet resultSet = statement.executeQuery();\r\n            if (resultSet.next()) {\r\n                String password = resultSet.getString(\"password\");\r\n                String passwordReminder = resultSet.getString(\"password_reminder\");\r\n                String role = resultSet.getString(\"role\");\r\n                String status = resultSet.getString(\"status\");\r\n                return new User(username, password, passwordReminder, role, status);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public List<User> getAllUsers(boolean isTest) throws SQLException {\r\n        List<User> users = new ArrayList<>();\r\n        String query = \"SELECT * FROM users\";\r\n        Connection connection = getConnection(isTest);\r\n        try (PreparedStatement statement = connection.prepareStatement(query);\r\n             ResultSet resultSet = statement.executeQuery()) {\r\n            while (resultSet.next()) {\r\n                String username = resultSet.getString(\"username\");\r\n                String password = resultSet.getString(\"password\");\r\n                String passwordReminder = resultSet.getString(\"password_reminder\");\r\n                String role = resultSet.getString(\"role\");\r\n                String status = resultSet.getString(\"status\");\r\n                users.add(new User(username, password, passwordReminder, role, status));\r\n            }\r\n        }\r\n        return users;\r\n    }\r\n\r\n    public void banUser(String username, boolean isTest) throws SQLException {\r\n        String query = \"UPDATE users SET status = 'banned' WHERE username = ?\";\r\n        Connection connection = getConnection(isTest);\r\n        try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n            statement.setString(1, username);\r\n            statement.executeUpdate();\r\n        }\r\n    }\r\n\r\n    public void unbanUser(String username, boolean isTest) throws SQLException {\r\n        String query = \"UPDATE users SET status = 'active' WHERE username = ?\";\r\n        Connection connection = getConnection(isTest);\r\n        try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n            statement.setString(1, username);\r\n            statement.executeUpdate();\r\n        }\r\n    }\r\n\r\n    public void saveUser(User user, boolean isTest) throws SQLException {\r\n        String query = \"INSERT INTO users (username, password, password_reminder, role, status) VALUES (?, ?, ?, ?, ?)\";\r\n        Connection connection = getConnection(isTest);\r\n        try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n            statement.setString(1, user.getUsername());\r\n            statement.setString(2, user.getPassword());\r\n            statement.setString(3, user.getPasswordReminder());\r\n            statement.setString(4, user.getRole());\r\n            statement.setString(5, user.getStatus());\r\n            statement.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void updateUser(User user, boolean isTest) throws SQLException {\r\n        String query = \"UPDATE users SET password = ?, password_reminder = ? WHERE username = ?\";\r\n        Connection connection = getConnection(isTest);\r\n        try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n            statement.setString(1, user.getPassword());\r\n            statement.setString(2, user.getPasswordReminder());\r\n            statement.setString(3, user.getUsername());\r\n            statement.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void deleteUser(String username, boolean isTest) throws SQLException {\r\n        String deleteUserQuery = \"DELETE FROM users WHERE username = ?\";\r\n        String deleteResultsQuery = \"DELETE FROM scores WHERE username = ?\";\r\n        Connection connection = getConnection(isTest);\r\n        try (PreparedStatement deleteUserStmt = connection.prepareStatement(deleteUserQuery);\r\n             PreparedStatement deleteResultsStmt = connection.prepareStatement(deleteResultsQuery)) {\r\n\r\n            // Begin transaction\r\n            connection.setAutoCommit(false);\r\n\r\n            // Delete user\r\n            deleteUserStmt.setString(1, username);\r\n            deleteUserStmt.executeUpdate();\r\n\r\n            // Delete user results\r\n            deleteResultsStmt.setString(1, username);\r\n            deleteResultsStmt.executeUpdate();\r\n\r\n            // Commit transaction\r\n            connection.commit();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private static Connection getConnection(boolean isTest) throws SQLException {\r\n        Connection connection;\r\n        if (isTest) {\r\n            connection = Database.getTestConnection();\r\n        } else {\r\n            connection = Database.getConnection();\r\n        }\r\n        return connection;\r\n    }\r\n\r\n    public void saveScore(String username, int score, boolean isTest) throws SQLException {\r\n        List<Score> userTopScores = getTopScores(username, 10, isTest);\r\n        List<Score> overallTopScores = getTopScores(null, 10, isTest);\r\n        if ((userTopScores.size() < 10 || score > userTopScores.get(userTopScores.size() - 1)\r\n                .getScore()) || (overallTopScores.size() < 10 || score > overallTopScores.get(overallTopScores.size() - 1)\r\n                .getScore())) {\r\n\r\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n            String timestamp = LocalDateTime.now().format(formatter);\r\n\r\n            insertScore(username, score, timestamp, isTest);\r\n        }\r\n    }\r\n\r\n    private void insertScore(String username, int score, String timestamp, boolean isTest) throws SQLException {\r\n        LoggerUtil.logDebug(username);\r\n        String query = \"INSERT INTO scores (username, score, timestamp) VALUES (?, ?, ?)\";\r\n        LoggerUtil.logDebug(query);\r\n        Connection connection = getConnection(isTest);\r\n        try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n            statement.setString(1, username);\r\n            statement.setInt(2, score);\r\n            statement.setString(3, timestamp);\r\n            statement.executeUpdate();\r\n        }\r\n    }\r\n\r\n    public List<Score> getTopScores(String username, int limit, boolean isTest) throws SQLException {\r\n        List<Score> scores = new ArrayList<>();\r\n        String query;\r\n\r\n        if (username != null) {\r\n            query = \"SELECT s.score, s.timestamp FROM scores s JOIN users u ON s.username = u.username \" +\r\n                    \"WHERE s.username = ? AND u.status != 'banned' ORDER BY s.score DESC LIMIT ?\";\r\n        } else {\r\n            query = \"SELECT s.username, s.score, s.timestamp FROM scores s JOIN users u ON s.username = u.username \" +\r\n                    \"WHERE u.status != 'banned' ORDER BY s.score DESC LIMIT ?\";\r\n        }\r\n\r\n        Connection connection = getConnection(isTest);\r\n        try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n            if (username != null) {\r\n                statement.setString(1, username);\r\n                statement.setInt(2, limit);\r\n            } else {\r\n                statement.setInt(1, limit);\r\n            }\r\n\r\n            ResultSet resultSet = statement.executeQuery();\r\n            while (resultSet.next()) {\r\n                String user = username != null ? username : resultSet.getString(\"username\");\r\n                int score = resultSet.getInt(\"score\");\r\n                String timestamp = resultSet.getString(\"timestamp\");\r\n                scores.add(new Score(user, score, timestamp));\r\n            }\r\n        }\r\n        return scores;\r\n    }\r\n\r\n    public ObservableList<Ranking> getTopPlayers() throws SQLException {\r\n        List<Ranking> rankingList = new ArrayList<>();\r\n        String query = \"SELECT s.username, SUM(s.score) AS total_score \" +\r\n                \"FROM scores s JOIN users u ON s.username = u.username \" +\r\n                \"WHERE u.status != 'banned' \" +\r\n                \"GROUP BY s.username \" +\r\n                \"ORDER BY total_score DESC \" +\r\n                \"LIMIT 10\";\r\n        Connection connection = Database.getConnection();\r\n        try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n            ResultSet resultSet = statement.executeQuery();\r\n            while (resultSet.next()) {\r\n                String username = resultSet.getString(\"username\");\r\n                int totalScore = resultSet.getInt(\"total_score\");\r\n                rankingList.add(new Ranking(username, totalScore));\r\n            }\r\n        }\r\n        return FXCollections.observableArrayList(rankingList);\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/user/UserDAO.java b/src/main/java/model/user/UserDAO.java
--- a/src/main/java/model/user/UserDAO.java	
+++ b/src/main/java/model/user/UserDAO.java	
@@ -2,10 +2,10 @@
 
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
-import model.Score;
+import model.score.Score;
 import model.database.Database;
-import model.ranking.Ranking;
-import utils.LoggerUtil;
+import model.score.Ranking;
+import util.LoggerUtil;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
Index: src/main/java/model/Basket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/Basket.java b/src/main/java/model/game/Basket.java
rename from src/main/java/model/Basket.java
rename to src/main/java/model/game/Basket.java
--- a/src/main/java/model/Basket.java	
+++ b/src/main/java/model/game/Basket.java	
@@ -1,9 +1,9 @@
-package model;
+package model.game;
 
 import javafx.scene.canvas.GraphicsContext;
 import javafx.scene.image.Image;
 
-import static utils.ResourcePaths.IMAGE_BASKET_PNG;
+import static util.ResourcePaths.IMAGE_BASKET_PNG;
 
 public class Basket {
     private double x;
Index: src/main/java/model/ranking/Ranking.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/ranking/Ranking.java b/src/main/java/model/score/Ranking.java
rename from src/main/java/model/ranking/Ranking.java
rename to src/main/java/model/score/Ranking.java
--- a/src/main/java/model/ranking/Ranking.java	
+++ b/src/main/java/model/score/Ranking.java	
@@ -1,4 +1,4 @@
-package model.ranking;
+package model.score;
 
 public class Ranking {
     private String username;
Index: src/main/java/model/falling/BlackFruit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/falling/BlackFruit.java b/src/main/java/model/game/BlackFruit.java
rename from src/main/java/model/falling/BlackFruit.java
rename to src/main/java/model/game/BlackFruit.java
--- a/src/main/java/model/falling/BlackFruit.java	
+++ b/src/main/java/model/game/BlackFruit.java	
@@ -1,6 +1,6 @@
-package model.falling;
+package model.game;
 
-import static utils.ResourcePaths.IMAGE_BLACK_PNG;
+import static util.ResourcePaths.IMAGE_BLACK_PNG;
 
 public class BlackFruit extends FallingObject {
     public BlackFruit(double x, double y, double speed, double width, double height) {
Index: .idea/runConfigurations/runGame.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations/runGame.xml b/.idea/runConfigurations/runGame.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/runConfigurations/runGame.xml	
@@ -0,0 +1,52 @@
+<component name="ProjectRunConfigurationManager">
+    <configuration default="false" name="RunGame" type="MavenRunConfiguration" factoryName="Maven">
+        <MavenSettings>
+            <option name="myGeneralSettings" />
+            <option name="myRunnerSettings">
+                <MavenRunnerSettings>
+                    <option name="delegateBuildToMaven" value="false" />
+                    <option name="environmentProperties">
+                        <map />
+                    </option>
+                    <option name="jreName" value="#USE_PROJECT_JDK" />
+                    <option name="mavenProperties">
+                        <map />
+                    </option>
+                    <option name="passParentEnv" value="true" />
+                    <option name="runMavenInBackground" value="true" />
+                    <option name="skipTests" value="false" />
+                    <option name="vmOptions" value="--module-path C:Entwicklung\tools\jdk\javafx-sdk-17.0.11\bin --add-modules javafx.controls,javafx.fxml" />
+                </MavenRunnerSettings>
+            </option>
+            <option name="myRunnerParameters">
+                <MavenRunnerParameters>
+                    <option name="profiles">
+                        <set />
+                    </option>
+                    <option name="goals">
+                        <list>
+                            <option value="javafx:run" />
+                        </list>
+                    </option>
+                    <option name="pomFileName" />
+                    <option name="profilesMap">
+                        <map />
+                    </option>
+                    <option name="resolveToWorkspace" value="false" />
+                    <option name="workingDirPath" value="$PROJECT_DIR$" />
+                </MavenRunnerParameters>
+            </option>
+        </MavenSettings>
+        <extension name="net.ashald.envfile">
+            <option name="IS_ENABLED" value="false" />
+            <option name="IS_SUBST" value="false" />
+            <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
+            <option name="IS_IGNORE_MISSING_FILES" value="false" />
+            <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
+            <ENTRIES>
+                <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
+            </ENTRIES>
+        </extension>
+        <method v="2" />
+    </configuration>
+</component>
\ No newline at end of file
Index: src/main/java/model/falling/BonusTime.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/falling/BonusTime.java b/src/main/java/model/game/BonusTime.java
rename from src/main/java/model/falling/BonusTime.java
rename to src/main/java/model/game/BonusTime.java
--- a/src/main/java/model/falling/BonusTime.java	
+++ b/src/main/java/model/game/BonusTime.java	
@@ -1,6 +1,6 @@
-package model.falling;
+package model.game;
 
-import static utils.ResourcePaths.IMAGE_CLOCK_PNG;
+import static util.ResourcePaths.IMAGE_CLOCK_PNG;
 
 public class BonusTime extends FallingObject {
     public BonusTime(double x, double y, double speed, double width, double height) {
Index: src/main/java/model/falling/Fruit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/falling/Fruit.java b/src/main/java/model/game/Fruit.java
rename from src/main/java/model/falling/Fruit.java
rename to src/main/java/model/game/Fruit.java
--- a/src/main/java/model/falling/Fruit.java	
+++ b/src/main/java/model/game/Fruit.java	
@@ -1,6 +1,6 @@
-package model.falling;
+package model.game;
 
-import static utils.ResourcePaths.IMAGE_FRUIT_PNG;
+import static util.ResourcePaths.IMAGE_FRUIT_PNG;
 
 public class Fruit extends FallingObject {
     public Fruit(double x, double y, double speed, double width, double height) {
Index: src/main/java/util/PreferencesUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/PreferencesUtil.java b/src/main/java/util/PreferencesUtil.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/PreferencesUtil.java	
@@ -0,0 +1,80 @@
+package util;
+
+import java.io.*;
+import java.util.Properties;
+
+import static util.ResourcePaths.DEFAULT_LOG_DIRECTORY;
+import static util.SceneConstants.*;
+
+public class PreferencesUtil {
+
+    private PreferencesUtil() {}
+    private static final String PREFERENCES_FILE = "user_preferences.properties";
+    private static final Properties properties = new Properties();
+
+    static {
+        loadProperties();
+    }
+
+    private static synchronized void loadProperties() {
+        File file = new File(PREFERENCES_FILE);
+        if (!file.exists()) {
+            try {
+                if (file.createNewFile()) {
+                    LoggerUtil.logDebug("New user preferences file created.");
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        try (InputStream input = new FileInputStream(PREFERENCES_FILE)) {
+            properties.load(input);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static synchronized void saveProperties() {
+        try (OutputStream output = new FileOutputStream(PREFERENCES_FILE)) {
+            properties.store(output, null);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static synchronized void setPreference(String key, String value) {
+        properties.setProperty(UserSession.getInstance().getUsername() + DOT + key, value);
+        saveProperties();
+    }
+
+    public static synchronized String getPreference(String key, String defaultValue) {
+        return properties.getProperty(UserSession.getInstance().getUsername() + DOT + key, defaultValue);
+    }
+
+    public static String getDefaultLogPath() {
+        return new File(DEFAULT_LOG_DIRECTORY).getAbsolutePath();
+    }
+
+    public static synchronized void setDefaultPreferences(String username) {
+        loadProperties();
+        if (!properties.containsKey(username + DOT + GAME_MODE)) {
+            setPreference(GAME_MODE, GameMode.NORMAL.getValue());
+            setPreference(DIFFICULTY, Difficulty.EASY.getValue());
+            setPreference(LOG_FILE_PATH, "");
+            setPreference(TEXTURE, Texture.FOREST.getValue());
+            setPreference(LANGUAGE, ENGLISH);
+            setPreference(LEFT_KEY, LEFT_ARROW);
+            setPreference(RIGHT_KEY, RIGHT_ARROW);
+        }
+    }
+
+    public static synchronized void setTexture(Texture texture) {
+        setPreference(TEXTURE, texture.getValue());
+    }
+
+    public static synchronized Texture getTexture() {
+        String textureName = getPreference(TEXTURE, Texture.FOREST.getValue());
+        return Texture.valueOf(textureName.toUpperCase());
+    }
+
+}
Index: src/main/java/model/falling/Leaf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/falling/Leaf.java b/src/main/java/model/game/Leaf.java
rename from src/main/java/model/falling/Leaf.java
rename to src/main/java/model/game/Leaf.java
--- a/src/main/java/model/falling/Leaf.java	
+++ b/src/main/java/model/game/Leaf.java	
@@ -1,6 +1,6 @@
-package model.falling;
+package model.game;
 
-import static utils.ResourcePaths.IMAGE_LEAF_PNG;
+import static util.ResourcePaths.IMAGE_LEAF_PNG;
 
 public class Leaf extends FallingObject {
         public Leaf(double x, double y, double speed, double width, double height) {
Index: src/main/java/model/falling/ScoreMultiplier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/falling/ScoreMultiplier.java b/src/main/java/model/game/ScoreMultiplier.java
rename from src/main/java/model/falling/ScoreMultiplier.java
rename to src/main/java/model/game/ScoreMultiplier.java
--- a/src/main/java/model/falling/ScoreMultiplier.java	
+++ b/src/main/java/model/game/ScoreMultiplier.java	
@@ -1,6 +1,6 @@
-package model.falling;
+package model.game;
 
-import static utils.ResourcePaths.IMAGE_BONUS_PNG;
+import static util.ResourcePaths.IMAGE_BONUS_PNG;
 
 public class ScoreMultiplier extends FallingObject {
     public ScoreMultiplier(double x, double y, double speed, double width, double height) {
Index: src/main/java/controller/RegisterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport exceptions.HashException;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.TextField;\r\n\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.util.ResourceBundle;\r\n\r\nimport model.user.User;\r\nimport model.user.UserDAO;\r\nimport utils.LoggerUtil;\r\nimport utils.PasswordStrength;\r\nimport utils.UserRole;\r\n\r\nimport static utils.FXMLPaths.LOGIN;\r\nimport static utils.SceneConstants.AN_ERROR_OCCURRED_PLEASE_TRY_AGAIN;\r\nimport static utils.SceneConstants.BACK_TO_LOGIN;\r\nimport static utils.SceneConstants.CONFIRM_PASSWORD;\r\nimport static utils.SceneConstants.PASSWORD;\r\nimport static utils.SceneConstants.PASSWORDS_DO_NOT_MATCH;\r\nimport static utils.SceneConstants.PASSWORD_IS_NOT_STRONG_ENOUGH;\r\nimport static utils.SceneConstants.PASSWORD_STRENGTH;\r\nimport static utils.SceneConstants.REGISTER;\r\nimport static utils.SceneConstants.USERNAME_ALREADY_EXISTS;\r\nimport static utils.SceneConstants.USERNAME_PASSWORD_AND_PASSWORD_REMINDER_CANNOT_BE_EMPTY;\r\n\r\npublic class RegisterController extends BaseController implements Initializable {\r\n    @FXML\r\n    public Button registerButton;\r\n\r\n    @FXML\r\n    public Button backToLoginButton;\r\n\r\n    @FXML\r\n    private TextField usernameField;\r\n\r\n    @FXML\r\n    private PasswordField passwordField;\r\n\r\n    @FXML\r\n    private PasswordField confirmPasswordField;\r\n\r\n    @FXML\r\n    private Label passwordStrengthLabel;\r\n\r\n    @FXML\r\n    private Label errorLabel;\r\n\r\n    @FXML\r\n    private TextField passwordReminderField;\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        setMultilingualElement(registerButton, REGISTER);\r\n        setMultilingualElement(backToLoginButton, BACK_TO_LOGIN);\r\n        setMultilingualElement(passwordStrengthLabel, PASSWORD_STRENGTH);\r\n        setMultilingualPromptElement(passwordField, PASSWORD);\r\n        setMultilingualPromptElement(confirmPasswordField, CONFIRM_PASSWORD);\r\n    }\r\n\r\n    @FXML\r\n    private void handleRegisterButton(ActionEvent event) {\r\n        String username = usernameField.getText();\r\n        String password = passwordField.getText();\r\n        String confirmPassword = confirmPasswordField.getText();\r\n        String passwordReminder = passwordReminderField.getText();\r\n\r\n        if (!password.equals(confirmPassword)) {\r\n            setMultilingualElement(errorLabel, PASSWORDS_DO_NOT_MATCH);\r\n            return;\r\n        }\r\n\r\n        if (username.isEmpty() || password.isEmpty() || passwordReminder.isEmpty()) {\r\n            setMultilingualElement(errorLabel, USERNAME_PASSWORD_AND_PASSWORD_REMINDER_CANNOT_BE_EMPTY);\r\n            return;\r\n        }\r\n\r\n        if (!isPasswordStrong(password)) {\r\n            setMultilingualElement(errorLabel, PASSWORD_IS_NOT_STRONG_ENOUGH);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            UserDAO userDAO = new UserDAO();\r\n\r\n            if (null != userDAO.getUser(username, false)) {\r\n                setMultilingualElement(errorLabel, USERNAME_ALREADY_EXISTS);\r\n                return;\r\n            }\r\n\r\n            String hashedPassword = hashPassword(password);\r\n            userDAO.saveUser(new User(username,\r\n                    hashedPassword,\r\n                    passwordReminder,\r\n                    UserRole.ADMIN.value().equals(username) ? UserRole.ADMIN.value() : UserRole.USER.value(),\r\n                    \"active\"), false);\r\n            LoggerUtil.logInfo(\"User registered successfully\");\r\n\r\n            // Navigate back to login screen\r\n            navigateTo(LOGIN, event);\r\n\r\n        } catch (SQLException | HashException e) {\r\n            e.printStackTrace();\r\n            setMultilingualElement(errorLabel, AN_ERROR_OCCURRED_PLEASE_TRY_AGAIN);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleBackToLoginButton(ActionEvent event) {\r\n        navigateTo(LOGIN, event);\r\n    }\r\n\r\n    @FXML\r\n    private void checkPasswordStrength() {\r\n        String password = passwordField.getText();\r\n        String strength = getPasswordStrength(password);\r\n        passwordStrengthLabel.setText(\"Password strength: \" + strength);\r\n    }\r\n\r\n    private boolean isPasswordStrong(String password) {\r\n        return password.length() >= 8 && password.matches(\".*\\\\d.*\") && password.matches(\".*[a-zA-Z].*\");\r\n    }\r\n\r\n    private String getPasswordStrength(String password) {\r\n        if (password.length() < 8) {\r\n            return PasswordStrength.WEAK.value();\r\n        } else if (password.matches(\".*\\\\d.*\") && password.matches(\".*[a-zA-Z].*\")) {\r\n            return PasswordStrength.STRONG.value();\r\n        } else {\r\n            return PasswordStrength.MEDIUM.value();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/RegisterController.java b/src/main/java/controller/RegisterController.java
--- a/src/main/java/controller/RegisterController.java	
+++ b/src/main/java/controller/RegisterController.java	
@@ -1,6 +1,6 @@
 package controller;
 
-import exceptions.HashException;
+import exception.HashException;
 import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
 import javafx.fxml.Initializable;
@@ -15,21 +15,21 @@
 
 import model.user.User;
 import model.user.UserDAO;
-import utils.LoggerUtil;
-import utils.PasswordStrength;
-import utils.UserRole;
+import util.LoggerUtil;
+import util.PasswordStrength;
+import util.UserRole;
 
-import static utils.FXMLPaths.LOGIN;
-import static utils.SceneConstants.AN_ERROR_OCCURRED_PLEASE_TRY_AGAIN;
-import static utils.SceneConstants.BACK_TO_LOGIN;
-import static utils.SceneConstants.CONFIRM_PASSWORD;
-import static utils.SceneConstants.PASSWORD;
-import static utils.SceneConstants.PASSWORDS_DO_NOT_MATCH;
-import static utils.SceneConstants.PASSWORD_IS_NOT_STRONG_ENOUGH;
-import static utils.SceneConstants.PASSWORD_STRENGTH;
-import static utils.SceneConstants.REGISTER;
-import static utils.SceneConstants.USERNAME_ALREADY_EXISTS;
-import static utils.SceneConstants.USERNAME_PASSWORD_AND_PASSWORD_REMINDER_CANNOT_BE_EMPTY;
+import static util.FXMLPaths.LOGIN;
+import static util.SceneConstants.AN_ERROR_OCCURRED_PLEASE_TRY_AGAIN;
+import static util.SceneConstants.BACK_TO_LOGIN;
+import static util.SceneConstants.CONFIRM_PASSWORD;
+import static util.SceneConstants.PASSWORD;
+import static util.SceneConstants.PASSWORDS_DO_NOT_MATCH;
+import static util.SceneConstants.PASSWORD_IS_NOT_STRONG_ENOUGH;
+import static util.SceneConstants.PASSWORD_STRENGTH;
+import static util.SceneConstants.REGISTER;
+import static util.SceneConstants.USERNAME_ALREADY_EXISTS;
+import static util.SceneConstants.USERNAME_PASSWORD_AND_PASSWORD_REMINDER_CANNOT_BE_EMPTY;
 
 public class RegisterController extends BaseController implements Initializable {
     @FXML
Index: src/main/java/util/ResourcePaths.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/ResourcePaths.java b/src/main/java/util/ResourcePaths.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/ResourcePaths.java	
@@ -0,0 +1,18 @@
+package util;
+
+public class ResourcePaths {
+    private ResourcePaths() {}
+    public static final String IMAGE_ICON_PNG = "/image/icon.png";
+    public static final String IMAGE_BLACK_PNG = "/image/black.png";
+    public static final String IMAGE_CLOCK_PNG = "/image/clock.png";
+    public static final String IMAGE_FRUIT_PNG = "/image/fruit.png";
+    public static final String IMAGE_LEAF_PNG = "/image/leaf.png";
+    public static final String IMAGE_BONUS_PNG = "/image/bonus.png";
+    public static final String IMAGE_BASKET_PNG = "/image/basket.png";
+    public static final String IMAGE_CLOUD_1_PNG = "/image/cloud1.png";
+    public static final String IMAGE_CLOUD_2_PNG = "/image/cloud2.png";
+    public static final String IMAGE_CLOUD_3_PNG = "/image/cloud3.png";
+    public static final String SOUND_DEZERT_MP_3 = "/sound/dezert.mp3";
+    public static final String DEFAULT_LOG_DIRECTORY = "log";
+    public static final String BASE_STYLE_FOLDER = "/view/style/";
+}
Index: src/main/java/controller/DescriptionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\n\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\nimport static utils.FXMLPaths.MAIN_MENU;\r\nimport static utils.SceneConstants.BACK_TO_MAIN_MENU;\r\nimport static utils.SceneConstants.DESC_FIRST;\r\nimport static utils.SceneConstants.DESC_SECOND;\r\nimport static utils.SceneConstants.DESC_THIRD;\r\n\r\npublic class DescriptionController extends BaseController implements Initializable {\r\n\r\n    @FXML\r\n    private Label descFirst;\r\n\r\n    @FXML\r\n    private Label descSecond;\r\n\r\n    @FXML\r\n    private Label descThird;\r\n\r\n    @FXML\r\n    private Button backToMainMenu;\r\n\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        setMultilingualElement(descFirst, DESC_FIRST);\r\n        setMultilingualElement(descSecond, DESC_SECOND);\r\n        setMultilingualElement(descThird, DESC_THIRD);\r\n        setMultilingualElement(backToMainMenu, BACK_TO_MAIN_MENU);\r\n    }\r\n\r\n    @FXML\r\n    private void handleBackToMainMenuButton(ActionEvent event) {\r\n        navigateTo(MAIN_MENU, event);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/DescriptionController.java b/src/main/java/controller/DescriptionController.java
--- a/src/main/java/controller/DescriptionController.java	
+++ b/src/main/java/controller/DescriptionController.java	
@@ -9,11 +9,11 @@
 import java.net.URL;
 import java.util.ResourceBundle;
 
-import static utils.FXMLPaths.MAIN_MENU;
-import static utils.SceneConstants.BACK_TO_MAIN_MENU;
-import static utils.SceneConstants.DESC_FIRST;
-import static utils.SceneConstants.DESC_SECOND;
-import static utils.SceneConstants.DESC_THIRD;
+import static util.FXMLPaths.MAIN_MENU;
+import static util.SceneConstants.BACK_TO_MAIN_MENU;
+import static util.SceneConstants.DESC_FIRST;
+import static util.SceneConstants.DESC_SECOND;
+import static util.SceneConstants.DESC_THIRD;
 
 public class DescriptionController extends BaseController implements Initializable {
 
Index: src/main/resources/view/start.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/view/start.fxml b/src/main/resources/view/scene/start.fxml
rename from src/main/resources/view/start.fxml
rename to src/main/resources/view/scene/start.fxml
--- a/src/main/resources/view/start.fxml	
+++ b/src/main/resources/view/scene/start.fxml	
@@ -5,7 +5,7 @@
 
 <?import javafx.scene.layout.BorderPane?>
 <BorderPane fx:id="startPageRoot" xmlns="http://javafx.com/javafx" xmlns:fx="http://javafx.com/fxml"
-            fx:controller="controller.StartController" stylesheets="@forest.css">
+            fx:controller="controller.StartController" stylesheets="@../style/forest.css">
 <top>
     <VBox spacing="10" alignment="TOP_CENTER" styleClass="vbox-center">
         <Label text="Fruit Catcher" styleClass="retro-title"/>
Index: src/main/java/model/MovingCloud.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/MovingCloud.java b/src/main/java/model/game/MovingCloud.java
rename from src/main/java/model/MovingCloud.java
rename to src/main/java/model/game/MovingCloud.java
--- a/src/main/java/model/MovingCloud.java	
+++ b/src/main/java/model/game/MovingCloud.java	
@@ -1,4 +1,4 @@
-package model;
+package model.game;
 
 import javafx.scene.canvas.GraphicsContext;
 import javafx.scene.image.Image;
Index: src/main/java/model/GameLevel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/GameLevel.java b/src/main/java/model/game/GameLevel.java
rename from src/main/java/model/GameLevel.java
rename to src/main/java/model/game/GameLevel.java
--- a/src/main/java/model/GameLevel.java	
+++ b/src/main/java/model/game/GameLevel.java	
@@ -1,4 +1,4 @@
-package model;
+package model.game;
 
 public class GameLevel {
     private double fruitSpeed;
Index: src/main/java/controller/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport exceptions.HashException;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.input.KeyEvent;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.util.ResourceBundle;\r\n\r\nimport model.user.User;\r\nimport model.user.UserDAO;\r\nimport utils.LoggerUtil;\r\nimport utils.PreferencesUtil;\r\nimport utils.UserRole;\r\nimport utils.UserSession;\r\n\r\nimport static utils.FXMLPaths.REGISTER;\r\nimport static utils.LoggerUtil.configureLogger;\r\n\r\npublic class LoginController extends BaseController {\r\n\r\n    @FXML\r\n    private TextField usernameField;\r\n\r\n    @FXML\r\n    private PasswordField passwordField;\r\n\r\n    @FXML\r\n    private Label passwordReminderLabel;\r\n\r\n    @FXML\r\n    private Label errorMessage;\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        super.initialize(url, resourceBundle);\r\n        passwordField.setOnKeyPressed(this::handleKeyPressed);\r\n    }\r\n\r\n    private void handleKeyPressed(KeyEvent event) {\r\n        if (event.getCode() == KeyCode.ENTER) {\r\n            handleLoginButton();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleLoginButton() {\r\n        String username = usernameField.getText();\r\n        String password = passwordField.getText();\r\n\r\n        try {\r\n            String hashedPassword = hashPassword(password);\r\n            UserDAO userDAO = new UserDAO();\r\n            User user = userDAO.getUser(username, false);\r\n\r\n            if (user == null || !user.getPassword().equals(hashedPassword)) {\r\n                errorMessage.setText(\"Invalid username or password.\");\r\n                LoggerUtil.logWarning(\"Invalid login attempt: \" + username);\r\n            } else if (user.getStatus().equals(\"banned\")) {\r\n                errorMessage.setText(\"User is banned.\");\r\n                LoggerUtil.logWarning(\"Banned user login attempt: \" + username);\r\n            } else {\r\n                if (!user.getRole().equals(UserRole.ADMIN.value())) {\r\n                    UserSession.getInstance().setUsername(username); // Set the username in UserSession\r\n                    PreferencesUtil.setDefaultPreferences(username); // Set default settings for new users\r\n                    configureLogger(); // Set logger settings to user\r\n                }\r\n                navigateByRole(user, usernameField);\r\n            }\r\n        } catch (SQLException | IOException | HashException e) {\r\n            LoggerUtil.logSevere(\"Error during login attempt for user: \" + username);\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    @FXML\r\n    private void handleRegisterButton(ActionEvent event) {\r\n        navigateTo(REGISTER, event);\r\n    }\r\n\r\n    @FXML\r\n    private void handleForgotPasswordButton() throws SQLException {\r\n        String username = usernameField.getText();\r\n        if (username.isEmpty()) {\r\n            passwordReminderLabel.setText(\"Please enter your username.\");\r\n            LoggerUtil.logWarning(\"Forgot password attempt with empty username\");\r\n            return;\r\n        }\r\n\r\n        UserDAO userDAO = new UserDAO();\r\n        User user = userDAO.getUser(username, false);\r\n\r\n        if (user != null) {\r\n            passwordReminderLabel.setText(\"Password reminder: \" + user.getPasswordReminder());\r\n            LoggerUtil.logInfo(\"Password reminder shown for user: \" + username);\r\n        } else {\r\n            passwordReminderLabel.setText(\"Username not found.\");\r\n            LoggerUtil.logWarning(\"Forgot password attempt with non-existent username: \" + username);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/LoginController.java b/src/main/java/controller/LoginController.java
--- a/src/main/java/controller/LoginController.java	
+++ b/src/main/java/controller/LoginController.java	
@@ -1,6 +1,6 @@
 package controller;
 
-import exceptions.HashException;
+import exception.HashException;
 import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
 import javafx.scene.control.Label;
@@ -15,13 +15,13 @@
 
 import model.user.User;
 import model.user.UserDAO;
-import utils.LoggerUtil;
-import utils.PreferencesUtil;
-import utils.UserRole;
-import utils.UserSession;
+import util.LoggerUtil;
+import util.PreferencesUtil;
+import util.UserRole;
+import util.UserSession;
 
-import static utils.FXMLPaths.REGISTER;
-import static utils.LoggerUtil.configureLogger;
+import static util.FXMLPaths.REGISTER;
+import static util.LoggerUtil.configureLogger;
 
 public class LoginController extends BaseController {
 
Index: src/main/java/model/database/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.database;\r\n\r\nimport utils.ConfigUtil;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\n\r\npublic class Database {\r\n    private Database() {}\r\n    private static Connection connection;\r\n\r\n    private static final String INNER_DB_URL = \"jdbc:sqlite:fcg.db\";\r\n    private static final String TEST_DB_URL = \"jdbc:sqlite:fcg_test.db\";\r\n\r\n    public static Connection getConnection() throws SQLException {\r\n        if (connection == null || connection.isClosed()) {\r\n            try {\r\n                Class.forName(\"com.mysql.cj.jdbc.Driver\"); // load MySQL JDBC driver\r\n                String url = ConfigUtil.getConfig(\"db.url\");\r\n                String user = ConfigUtil.getConfig(\"db.user\");\r\n                String password = ConfigUtil.getConfig(\"db.password\");\r\n                if (url == null || url.isEmpty()) {\r\n                    connection = getInternalConnection();\r\n                } else {\r\n                    connection = DriverManager.getConnection(url, user, password);\r\n                }\r\n            } catch (ClassNotFoundException | SQLException | NullPointerException e) {\r\n                connection = getInternalConnection();\r\n            }\r\n        }\r\n        if (connection == null || connection.isClosed()) {\r\n            throw new SQLException(\"Unable to establish an internal or external database connection.\");\r\n        }\r\n        return connection;\r\n    }\r\n\r\n    public static Connection getTestConnection() throws SQLException {\r\n        if (connection == null || connection.isClosed()) {\r\n            try {\r\n                Class.forName(\"com.mysql.cj.jdbc.Driver\"); // load MySQL JDBC driver\r\n                String url = ConfigUtil.getTestConfig(\"test.db.url\");\r\n                String user = ConfigUtil.getTestConfig(\"test.db.user\");\r\n                String password = ConfigUtil.getTestConfig(\"test.db.password\");\r\n                if (url == null || url.isEmpty()) {\r\n                    connection = DriverManager.getConnection(TEST_DB_URL);\r\n                } else {\r\n                    connection = DriverManager.getConnection(url, user, password);\r\n                }\r\n            } catch (ClassNotFoundException | SQLException | NullPointerException e) {\r\n                connection = DriverManager.getConnection(TEST_DB_URL);\r\n            }\r\n        }\r\n        if (connection == null || connection.isClosed()) {\r\n            throw new SQLException(\"Unable to establish a test database connection.\");\r\n        }\r\n        return connection;\r\n    }\r\n\r\n    private static Connection getInternalConnection() throws SQLException {\r\n        return DriverManager.getConnection(INNER_DB_URL);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/database/Database.java b/src/main/java/model/database/Database.java
--- a/src/main/java/model/database/Database.java	
+++ b/src/main/java/model/database/Database.java	
@@ -1,6 +1,6 @@
 package model.database;
 
-import utils.ConfigUtil;
+import util.ConfigUtil;
 
 import java.sql.Connection;
 import java.sql.DriverManager;
Index: src/main/java/util/SceneConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/SceneConstants.java b/src/main/java/util/SceneConstants.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/SceneConstants.java	
@@ -0,0 +1,68 @@
+package util;
+
+public class SceneConstants {
+
+    private SceneConstants() {}
+
+    public static final String FRUIT_CATCHER = "Fruit Catcher";
+    public static final String DOT = ".";
+    public static final String TOP_SCORES = "topScores";
+    public static final String REGISTER = "register";
+    public static final String PASSWORD_STRENGTH = "passwordStrength";
+    public static final String PASSWORD = "password";
+    public static final String CONFIRM_PASSWORD = "confirmPassword";
+    public static final String BACK_TO_LOGIN = "backToLogin";
+    public static final String SCORE = "score";
+    public static final String TIMER = "timer";
+    public static final String BACKGROUND = "background";
+    public static final String MUSIC = "music";
+    public static final String PAUSE = "pause";
+    public static final String QUIT = "quit";
+    public static final String MESSAGES = "messages";
+    public static final String GAME_MODE = "gameMode";
+    public static final String DIFFICULTY = "difficulty";
+    public static final String TEXTURE = "texture";
+    public static final String LOG_FILE_PATH = "logFilePath";
+    public static final String LANGUAGE = "language";
+    public static final String LEFT_KEY = "leftKey";
+    public static final String RIGHT_KEY = "rightKey";
+    public static final String SAVE = "save";
+    public static final String BACK_TO_MAIN_MENU = "backToMainMenu";
+    public static final String CHOOSE_DIRECTORY = "chooseDirectory";
+    public static final String LEFT_ARROW = "<";
+    public static final String RIGHT_ARROW = ">";
+    public static final String LEFT = "LEFT";
+    public static final String RIGHT = "RIGHT";
+    public static final String ENGLISH = "English";
+    public static final String LOGGED_IN_AS = "loggedInAs";
+    public static final String START_GAME = "startGame";
+    public static final String DESCRIPTION = "description";
+    public static final String PLAYER_RESULTS = "playerResults";
+    public static final String PLAYER_RANKINGS = "playerRankings";
+    public static final String SETTINGS = "settings";
+    public static final String CHANGE_PASSWORD = "changePassword";
+    public static final String LOGOUT = "logout";
+    public static final String DELETE_ACCOUNT = "deleteAccount";
+    public static final String TIMESTAMP = "timestamp";
+    public static final String YES = "yes";
+    public static final String NO = "no";
+    public static final String USERNAME = "username";
+    public static final String CURRENT_PASSWORD = "currentPassword";
+    public static final String CURRENT_PASSWORD_IS_INCORRECT = "incorrectCurrentPassword";
+    public static final String NEW_PASSWORD = "newPassword";
+    public static final String CONFIRM_NEW_PASSWORD = "confirmNewPassword";
+    public static final String CONFIRM_DELETE_ACCOUNT = "confirmDeleteAccount";
+    public static final String PASSWORDS_DO_NOT_MATCH = "passwordsDoNotMatch";
+    public static final String USERNAME_PASSWORD_AND_PASSWORD_REMINDER_CANNOT_BE_EMPTY = "emptyRegisterFields";
+    public static final String PASSWORD_IS_NOT_STRONG_ENOUGH = "notStrongPassword";
+    public static final String USERNAME_ALREADY_EXISTS = "usernameAlreadyExists";
+    public static final String AN_ERROR_OCCURRED_PLEASE_TRY_AGAIN = "unknownError";
+    public static final String DESC_FIRST = "descFirst";
+    public static final String DESC_SECOND = "descSecond";
+    public static final String DESC_THIRD = "descThird";
+    public static final String DISABLE_BACKGROUND = "disableBackground";
+    public static final String ENABLE_BACKGROUND = "enableBackground";
+    public static final String PLAY_MUSIC = "playMusic";
+    public static final String PAUSE_MUSIC = "pauseMusic";
+
+}
Index: src/main/java/util/UserSession.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/UserSession.java b/src/main/java/util/UserSession.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/UserSession.java	
@@ -0,0 +1,25 @@
+package util;
+
+public class UserSession {
+    private static UserSession instance;
+    private String username;
+
+    private UserSession() {
+        // Private constructor to prevent instantiation
+    }
+
+    public static UserSession getInstance() {
+        if (instance == null) {
+            instance = new UserSession();
+        }
+        return instance;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+}
Index: src/main/java/util/FXMLPaths.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/FXMLPaths.java b/src/main/java/util/FXMLPaths.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/FXMLPaths.java	
@@ -0,0 +1,18 @@
+package util;
+
+public class FXMLPaths {
+    private FXMLPaths() {}
+    public static final String MAIN_MENU = "/view/scene/mainMenu.fxml";
+    public static final String LOGIN = "/view/scene/login.fxml";
+    public static final String START = "/view/scene/start.fxml";
+    public static final String REGISTER = "/view/scene/register.fxml";
+    public static final String GAME = "/view/scene/game.fxml";
+    public static final String GAME_OVER = "/view/scene/gameOver.fxml";
+    public static final String DESCRIPTION = "/view/scene/description.fxml";
+    public static final String PLAYER_RESULTS = "/view/scene/playerResults.fxml";
+    public static final String PLAYER_RANKINGS = "/view/scene/playerRankings.fxml";
+    public static final String SETTINGS = "/view/scene/settings.fxml";
+    public static final String CHANGE_PASSWORD = "/view/scene/changePassword.fxml";
+    public static final String DELETE_ACCOUNT_CONFIRMATION = "/view/scene/confirmationDialog.fxml";
+    public static final String ADMIN = "/view/scene/admin.fxml";
+}
Index: src/main/java/util/LoggerUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/LoggerUtil.java b/src/main/java/util/LoggerUtil.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/LoggerUtil.java	
@@ -0,0 +1,141 @@
+package util;
+
+import javafx.application.Platform;
+import javafx.scene.control.TextArea;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.AccessDeniedException;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.logging.*;
+
+import static util.ResourcePaths.DEFAULT_LOG_DIRECTORY;
+import static util.SceneConstants.LOG_FILE_PATH;
+
+public class LoggerUtil {
+    private LoggerUtil() {
+        // empty constructor
+    }
+
+    private static final Logger logger = Logger.getLogger(LoggerUtil.class.getName());
+    private static TextArea logTextArea;
+    private static FileHandler fileHandler;
+
+    public static void setLogTextArea(TextArea textArea) {
+        logTextArea = textArea;
+    }
+
+    public static void configureLogger() {
+        Logger rootLogger = Logger.getLogger("");
+        Handler[] handlers = rootLogger.getHandlers();
+        for (Handler handler : handlers) {
+            rootLogger.removeHandler(handler);
+        }
+
+        if (fileHandler != null) {
+            logger.removeHandler(fileHandler);
+            fileHandler.close();
+        }
+
+        try {
+            // Get current date and time for unique log file name
+            String timeStamp = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
+            String logDirectoryPath = getLogDirectory();
+            String logFileName = logDirectoryPath + File.separator + "game_" + timeStamp + ".txt";
+
+            // Check if the directory is writable
+            File logDirectory = new File(logDirectoryPath);
+            if (logDirectoryPath.equals(DEFAULT_LOG_DIRECTORY) && !logDirectory.exists()) {
+                boolean isDirectoryCreated = logDirectory.mkdirs();
+                if (!isDirectoryCreated) {
+                    throw new AccessDeniedException("Cannot create log directory: " + logDirectoryPath);
+                }
+            } else if (!logDirectoryPath.equals(DEFAULT_LOG_DIRECTORY) && !logDirectory.exists()) {
+                setDefaultLogDirectory();
+                configureLogger();
+                return;
+            }
+
+            if (!Files.isWritable(logDirectory.toPath())) {
+                throw new AccessDeniedException("Log directory is not writable: " + logDirectoryPath);
+            }
+
+            // Configure the logger with handler and formatter
+            setHandlerFormatter(logFileName);
+        } catch (AccessDeniedException e) {
+            String fallbackLogDirectory = System.getProperty("user.home") + File.separator + "logs";
+            configureFallbackLogger(fallbackLogDirectory);
+            logSevere("Access denied to log directory: " + e.getMessage() + ". Using fallback directory: " + fallbackLogDirectory);
+        } catch (IOException e) {
+            logSevere("Error occurred in FileHandler: " + e.getMessage());
+        }
+    }
+
+    public static void setDefaultLogDirectory() {
+        PreferencesUtil.setPreference(LOG_FILE_PATH, DEFAULT_LOG_DIRECTORY);
+    }
+
+    private static void configureFallbackLogger(String fallbackLogDirectory) {
+        try {
+            // Get current date and time for unique log file name
+            String timeStamp = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
+            String logFileName = fallbackLogDirectory + File.separator + "game_" + timeStamp + ".txt";
+
+            // Create fallback directory if it does not exist
+            Files.createDirectories(Paths.get(fallbackLogDirectory));
+
+            // Configure the logger with handler and formatter
+            setHandlerFormatter(logFileName);
+
+        } catch (IOException e) {
+            logSevere("Error occurred in FileHandler with fallback directory: " + e.getMessage());
+        }
+    }
+
+    private static void setHandlerFormatter(String logFileName) throws IOException {
+        // Configure the logger with handler and formatter
+        fileHandler = new FileHandler(logFileName, true);
+        fileHandler.setFormatter(new SimpleFormatter());
+        fileHandler.setLevel(Level.ALL);
+        logger.addHandler(fileHandler);
+
+        // Set console handler level to INFO to log INFO, WARNING, and SEVERE levels of messages to the console
+        ConsoleHandler consoleHandler = new ConsoleHandler();
+        consoleHandler.setLevel(Level.INFO);
+        consoleHandler.setFilter(logRecord -> logRecord.getLevel().intValue() >= Level.INFO.intValue());
+        logger.addHandler(consoleHandler);
+
+        // Ensure logger level is set to ALL so that all messages are logged
+        logger.setLevel(Level.ALL);
+    }
+
+    public static String getLogDirectory() {
+        return PreferencesUtil.getPreference(LOG_FILE_PATH, DEFAULT_LOG_DIRECTORY);
+    }
+
+    public static void logInfo(String message) {
+        log(message, Level.INFO);
+    }
+
+    public static void logWarning(String message) {
+        log(message, Level.WARNING);
+    }
+
+    public static void logSevere(String message) {
+        log(message, Level.SEVERE);
+    }
+
+    public static void logDebug(String message) {
+        log(message, Level.FINE);
+    }
+
+    private static void log(String message, Level level) {
+        logger.log(level, message);
+        if (logTextArea != null && level.intValue() >= Level.INFO.intValue()) {
+            Platform.runLater(() -> logTextArea.appendText(level.getLocalizedName() + ": " + message + "\n"));
+        }
+    }
+}
Index: src/main/java/controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.animation.Animation;\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Platform;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.media.Media;\r\nimport javafx.scene.media.MediaPlayer;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport model.*;\r\nimport model.falling.BlackFruit;\r\nimport model.falling.BonusTime;\r\nimport model.falling.FallingObject;\r\nimport model.falling.Fruit;\r\nimport model.falling.Leaf;\r\nimport model.falling.ScoreMultiplier;\r\nimport model.user.UserDAO;\r\nimport utils.Difficulty;\r\nimport utils.GameMode;\r\nimport utils.LoggerUtil;\r\nimport utils.PreferencesUtil;\r\n\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.util.*;\r\n\r\nimport static utils.ResourcePaths.IMAGE_CLOUD_1_PNG;\r\nimport static utils.ResourcePaths.IMAGE_CLOUD_2_PNG;\r\nimport static utils.ResourcePaths.IMAGE_CLOUD_3_PNG;\r\nimport static utils.ResourcePaths.SOUND_DEZERT_MP_3;\r\nimport static utils.SceneConstants.BACKGROUND;\r\nimport static utils.SceneConstants.DIFFICULTY;\r\nimport static utils.SceneConstants.DISABLE_BACKGROUND;\r\nimport static utils.SceneConstants.ENABLE_BACKGROUND;\r\nimport static utils.SceneConstants.GAME_MODE;\r\nimport static utils.SceneConstants.LEFT;\r\nimport static utils.SceneConstants.LEFT_ARROW;\r\nimport static utils.SceneConstants.LEFT_KEY;\r\nimport static utils.SceneConstants.MUSIC;\r\nimport static utils.SceneConstants.PAUSE;\r\nimport static utils.SceneConstants.PAUSE_MUSIC;\r\nimport static utils.SceneConstants.PLAY_MUSIC;\r\nimport static utils.SceneConstants.QUIT;\r\nimport static utils.SceneConstants.RIGHT;\r\nimport static utils.SceneConstants.RIGHT_ARROW;\r\nimport static utils.SceneConstants.RIGHT_KEY;\r\nimport static utils.SceneConstants.SCORE;\r\nimport static utils.SceneConstants.TIMER;\r\nimport static utils.FXMLPaths.MAIN_MENU;\r\n\r\npublic class GameController extends BaseController implements Initializable {\r\n\r\n    @FXML\r\n    Canvas gameCanvas;\r\n\r\n    @FXML\r\n    Label scoreLabel;\r\n\r\n    @FXML\r\n    Label timerLabel;\r\n\r\n    @FXML\r\n    Button toggleBackgroundButton;\r\n\r\n    @FXML\r\n    Button toggleMusicButton;\r\n\r\n    @FXML\r\n    Button pauseButton;\r\n\r\n    @FXML\r\n    Button quitButton;\r\n\r\n    @FXML\r\n    TextArea logTextArea;\r\n\r\n    public static final Random RANDOM = new Random();\r\n    public UserDAO userDAO;\r\n    private GraphicsContext gc;\r\n    Timeline gameLoop;\r\n    int score;\r\n    List<FallingObject> fallingObjects;\r\n    Basket basket;\r\n    boolean gamePaused;\r\n    private int timeRemaining;\r\n    private Timer countdownTimer;\r\n    private boolean isMusicPlaying = false;\r\n    MediaPlayer mediaPlayer;\r\n    KeyCode leftKey;\r\n    KeyCode rightKey;\r\n    int level;\r\n    List<GameLevel> levels;\r\n    boolean doublePointsActive;\r\n    private Timeline doublePointsTimer;\r\n    private boolean isNormalMode;\r\n    private boolean isPlaygroundMode;\r\n    List<MovingCloud> clouds;\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        updateTexts();\r\n\r\n        gc = gameCanvas.getGraphicsContext2D();\r\n        score = 0;\r\n        timeRemaining = 60;\r\n        fallingObjects = new ArrayList<>();\r\n        basket = new Basket(300, 500, 50, 50);\r\n        userDAO = new UserDAO();\r\n        gamePaused = false;\r\n        doublePointsActive = false;\r\n        clouds = new ArrayList<>();\r\n\r\n        initialSetup();\r\n\r\n        Platform.runLater(() -> {\r\n            adjustCanvasSize();\r\n            loadControlKeys();\r\n            startGame();\r\n            gameCanvas.getScene().setOnKeyPressed(this::handleKeyPress);\r\n            gameCanvas.getScene().setOnKeyReleased(this::handleKeyRelease);\r\n            gameCanvas.requestFocus();\r\n            if (isNormalMode) {\r\n                startCountdown();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void initialSetup() {\r\n        setupGameMode();\r\n        setupInitialLevels();\r\n        setupDifficulty();\r\n        setupBackground();\r\n        setupMusic();\r\n        setupLogTextArea();\r\n    }\r\n\r\n    private void setupGameMode() {\r\n        String gameMode = PreferencesUtil.getPreference(GAME_MODE, GameMode.NORMAL.getValue());\r\n        isNormalMode = GameMode.NORMAL.getValue().equalsIgnoreCase(gameMode);\r\n        isPlaygroundMode = GameMode.PLAYGROUND.getValue().equalsIgnoreCase(gameMode);\r\n        if (!isNormalMode) {\r\n            timerLabel.setVisible(false);\r\n        }\r\n    }\r\n\r\n    private void setupDifficulty() {\r\n        String difficulty = PreferencesUtil.getPreference(DIFFICULTY, Difficulty.EASY.getValue().toLowerCase());\r\n        switch (difficulty) {\r\n            case \"Medium\" -> level = 5;\r\n            case \"Hard\" -> level = 10;\r\n            default -> level = 0;\r\n        }\r\n    }\r\n\r\n    private void updateTexts() {\r\n        setMultilingualElement(scoreLabel, SCORE);\r\n        setMultilingualElement(timerLabel, TIMER);\r\n        setMultilingualElement(toggleBackgroundButton, BACKGROUND);\r\n        setMultilingualElement(toggleMusicButton, MUSIC);\r\n        setMultilingualElement(pauseButton, PAUSE);\r\n        setMultilingualElement(quitButton, QUIT);\r\n    }\r\n\r\n    void handleKeyRelease(KeyEvent event) {\r\n        if (event.getCode() == leftKey || event.getCode() == rightKey) {\r\n            basket.stop();\r\n        }\r\n    }\r\n\r\n    void loadControlKeys() {\r\n        String leftKeyPref = PreferencesUtil.getPreference(LEFT_KEY, LEFT_ARROW);\r\n        leftKey = KeyCode.valueOf(leftKeyPref.equals(LEFT_ARROW) ? LEFT : leftKeyPref);\r\n\r\n        String rightKeyPref = PreferencesUtil.getPreference(RIGHT_KEY, RIGHT_ARROW);\r\n        rightKey = KeyCode.valueOf(rightKeyPref.equals(RIGHT_ARROW) ? RIGHT : rightKeyPref);\r\n    }\r\n\r\n    private void adjustCanvasSize() {\r\n        Stage stage = (Stage) gameCanvas.getScene().getWindow();\r\n        gameCanvas.setWidth(stage.getWidth() - 20);\r\n        gameCanvas.setHeight(stage.getHeight());\r\n        stage.widthProperty().addListener((obs, oldVal, newVal) -> gameCanvas.setWidth(newVal.doubleValue()));\r\n        stage.heightProperty().addListener((obs, oldVal, newVal) -> gameCanvas.setHeight(newVal.doubleValue()));\r\n    }\r\n\r\n    private void setupLogTextArea() {\r\n        LoggerUtil.setLogTextArea(logTextArea);\r\n    }\r\n\r\n    private void setupInitialLevels() {\r\n        levels = new ArrayList<>();\r\n        double fruitSpeed = 2.0;\r\n        double leafSpeed = 1.5;\r\n        double fruitSize = 30;\r\n        double leafSize = 30;\r\n        double fruitSpawnRate = 0.01;\r\n        double leafSpawnRate = 0.005;\r\n\r\n        for (int i = 0; i < 15; i++) { // Pre-define levels up to 15\r\n            levels.add(new GameLevel(fruitSpeed, leafSpeed, fruitSize, leafSize, fruitSpawnRate, leafSpawnRate));\r\n            fruitSpeed += 0.25;\r\n            leafSpeed += 0.25;\r\n            fruitSize = Math.max(fruitSize - 1, 4); // Ensure fruit size doesn't go below a visible barrier\r\n            leafSize += 1;\r\n            fruitSpawnRate += 0.005;\r\n            leafSpawnRate += 0.005;\r\n        }\r\n    }\r\n\r\n    private void addLevel() {\r\n        double fruitSpeed = levels.get(levels.size() - 1).getFruitSpeed() + 0.25;\r\n        double leafSpeed = levels.get(levels.size() - 1).getLeafSpeed() + 0.25;\r\n        double fruitSize = Math.max(levels.get(levels.size() - 1).getFruitSize() - 1, 4);\r\n        double leafSize = levels.get(levels.size() - 1).getLeafSize() + 1;\r\n        double fruitSpawnRate = levels.get(levels.size() - 1).getFruitSpawnRate() + 0.005;\r\n        double leafSpawnRate = levels.get(levels.size() - 1).getLeafSpawnRate() + 0.005;\r\n        levels.add(new GameLevel(fruitSpeed, leafSpeed, fruitSize, leafSize, fruitSpawnRate, leafSpawnRate));\r\n    }\r\n\r\n    private void setupBackground() {\r\n        Image cloud1 = loadImage(IMAGE_CLOUD_1_PNG);\r\n        Image cloud2 = loadImage(IMAGE_CLOUD_2_PNG);\r\n        Image cloud3 = loadImage(IMAGE_CLOUD_3_PNG);\r\n\r\n        double scaleFactor = 0.1;\r\n        for (int i = 0; i < 20; i++) {\r\n            Image selectedCloud = switch (RANDOM.nextInt(3)) {\r\n                case 0 -> cloud1;\r\n                case 1 -> cloud2;\r\n                default -> cloud3;\r\n            };\r\n            double y = RANDOM.nextDouble() * gameCanvas.getHeight() * 0.6;\r\n            double speed = 0.5 + RANDOM.nextDouble() * 0.5;\r\n            boolean moveRight = RANDOM.nextBoolean();\r\n            clouds.add(new MovingCloud(RANDOM.nextDouble() * gameCanvas.getWidth(),\r\n                    y,\r\n                    speed,\r\n                    moveRight,\r\n                    selectedCloud,\r\n                    scaleFactor));\r\n        }\r\n    }\r\n\r\n    void setupMusic() {\r\n        String musicFile = Objects.requireNonNull(getClass().getResource(SOUND_DEZERT_MP_3)).toExternalForm();\r\n        Media media = new Media(musicFile);\r\n        mediaPlayer = new MediaPlayer(media);\r\n        mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE);\r\n    }\r\n\r\n    @FXML\r\n    private void handleToggleBackgroundButton() {\r\n        if (clouds.isEmpty()) {\r\n            setupBackground();\r\n            setMultilingualElement(toggleBackgroundButton, DISABLE_BACKGROUND);\r\n            LoggerUtil.logInfo(\"Background enabled\");\r\n        } else {\r\n            clouds.clear();\r\n            setMultilingualElement(toggleBackgroundButton, ENABLE_BACKGROUND);\r\n            LoggerUtil.logInfo(\"Background disabled\");\r\n        }\r\n        gameCanvas.requestFocus();\r\n    }\r\n\r\n    @FXML\r\n    private void handleToggleMusicButton() {\r\n        if (isMusicPlaying) {\r\n            mediaPlayer.pause();\r\n            isMusicPlaying = false;\r\n            setMultilingualElement(toggleMusicButton, PLAY_MUSIC);\r\n        } else {\r\n            mediaPlayer.play();\r\n            isMusicPlaying = true;\r\n            setMultilingualElement(toggleMusicButton, PAUSE_MUSIC);\r\n        }\r\n        gameCanvas.requestFocus();\r\n    }\r\n\r\n    void startGame() {\r\n        gameLoop = new Timeline(new KeyFrame(Duration.millis(16), e -> {\r\n            if (!gamePaused) {\r\n                updateGame();\r\n                renderGame();\r\n            }\r\n        }));\r\n        gameLoop.setCycleCount(Animation.INDEFINITE);\r\n        gameLoop.play();\r\n    }\r\n\r\n    void updateGame() {\r\n        basket.update(gameCanvas.getWidth(), gameCanvas.getHeight());\r\n\r\n        for (FallingObject obj : fallingObjects) {\r\n            obj.update();\r\n            manageColliding(obj);\r\n\r\n            if (obj.getY() > basket.getY() + basket.getHeight()) {\r\n                obj.setCaught(true);\r\n            }\r\n        }\r\n\r\n        fallingObjects.removeIf(FallingObject::isCaught);\r\n        spawnNewFallingObjects();\r\n        score = Math.max(score, 0);\r\n        setMultilingualElement(scoreLabel, SCORE, \": \" + score);\r\n\r\n        if (!isPlaygroundMode && (score > (level + 1) * 150)) {\r\n            levelUp();\r\n        }\r\n\r\n        for (MovingCloud cloud : clouds) {\r\n            cloud.update(gameCanvas.getWidth());\r\n        }\r\n    }\r\n\r\n    void manageColliding(FallingObject obj) {\r\n        if (obj.collidesWith(basket)) {\r\n            if (obj instanceof Fruit) {\r\n                score += doublePointsActive ? 20 : 10;\r\n            } else if (obj instanceof Leaf) {\r\n                score -= 5;\r\n            } else if (obj instanceof ScoreMultiplier) {\r\n                activateDoublePoints();\r\n            } else if (obj instanceof BonusTime) {\r\n                timeRemaining += 10;\r\n            } else if (obj instanceof BlackFruit) {\r\n                endGame();\r\n            }\r\n            obj.setCaught(true);\r\n        }\r\n    }\r\n\r\n\r\n    private void renderGame() {\r\n        gc.clearRect(0, 0, gameCanvas.getWidth(), gameCanvas.getHeight());\r\n\r\n        for (MovingCloud cloud : clouds) {\r\n            cloud.render(gc);\r\n        }\r\n\r\n        basket.render(gc);\r\n        for (FallingObject obj : fallingObjects) {\r\n            obj.render(gc);\r\n        }\r\n    }\r\n\r\n    void handleKeyPress(KeyEvent event) {\r\n        if (event.getCode() == leftKey) {\r\n            basket.moveLeft();\r\n        } else if (event.getCode() == rightKey) {\r\n            basket.moveRight();\r\n        }\r\n    }\r\n\r\n    void spawnNewFallingObjects() {\r\n        GameLevel currentLevel = levels.get(level);\r\n        if (level == levels.size() - 2) {\r\n            addLevel();\r\n        }\r\n\r\n        double canvasWidth = gameCanvas.getWidth() - 20;\r\n        if (canvasWidth <= 0) {\r\n            canvasWidth = 1; // Ensure that the bound for nextInt is positive\r\n        }\r\n\r\n        if (shouldSpawn(currentLevel.getFruitSpawnRate())) {\r\n            fallingObjects.add(new Fruit(RANDOM.nextInt((int) canvasWidth),\r\n                    0,\r\n                    currentLevel.getFruitSpeed(),\r\n                    currentLevel.getFruitSize(),\r\n                    currentLevel.getFruitSize()));\r\n        }\r\n\r\n        if (shouldSpawn(currentLevel.getLeafSpawnRate())) {\r\n            fallingObjects.add(new Leaf(RANDOM.nextInt((int) canvasWidth),\r\n                    0,\r\n                    currentLevel.getLeafSpeed(),\r\n                    currentLevel.getLeafSize(),\r\n                    currentLevel.getLeafSize()));\r\n        }\r\n\r\n        if (shouldSpawn(0.001)) { // Spawn a ScoreMultiplier with a 0.1% chance\r\n            fallingObjects.add(new ScoreMultiplier(RANDOM.nextInt((int) canvasWidth),\r\n                    0,\r\n                    currentLevel.getFruitSpeed(),\r\n                    currentLevel.getFruitSize(),\r\n                    currentLevel.getFruitSize()));\r\n        }\r\n\r\n        if (shouldSpawn(0.001) && isNormalMode) { // Spawn a BonusTime, in normal mode, with a 0.1% chance\r\n            fallingObjects.add(new BonusTime(RANDOM.nextInt((int) canvasWidth),\r\n                    0,\r\n                    currentLevel.getFruitSpeed(),\r\n                    currentLevel.getFruitSize(),\r\n                    currentLevel.getFruitSize()));\r\n        }\r\n\r\n        if (shouldSpawn(0.002)) { // Spawn a BlackFruit with a 0.2% chance\r\n            fallingObjects.add(new BlackFruit(RANDOM.nextInt((int) canvasWidth),\r\n                    0,\r\n                    currentLevel.getFruitSpeed(),\r\n                    currentLevel.getFruitSize(),\r\n                    currentLevel.getFruitSize()));\r\n        }\r\n    }\r\n\r\n\r\n    boolean shouldSpawn(double rate) {\r\n        return RANDOM.nextDouble() < rate;\r\n    }\r\n\r\n\r\n    void activateDoublePoints() {\r\n        doublePointsActive = true;\r\n        LoggerUtil.logInfo(\"Double points activated!\");\r\n\r\n        if (doublePointsTimer != null) {\r\n            doublePointsTimer.stop();\r\n        }\r\n\r\n        doublePointsTimer = new Timeline(new KeyFrame(Duration.seconds(10), e -> {\r\n            doublePointsActive = false;\r\n            LoggerUtil.logInfo(\"Double points deactivated.\");\r\n        }));\r\n        doublePointsTimer.play();\r\n    }\r\n\r\n    void levelUp() {\r\n        if (!isPlaygroundMode && level < levels.size() - 1) {\r\n            level++;\r\n            LoggerUtil.logInfo(\"Level up! New level: \" + (level + 1));\r\n        }\r\n    }\r\n\r\n    private void startCountdown() {\r\n        countdownTimer = new Timer();\r\n        TimerTask task = new TimerTask() {\r\n            @Override\r\n            public void run() {\r\n                Platform.runLater(() -> {\r\n                    timeRemaining--;\r\n                    setMultilingualElement(timerLabel, TIMER, \": \" + timeRemaining);\r\n                    if (timeRemaining <= 0) {\r\n                        endGame();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        countdownTimer.scheduleAtFixedRate(task, 1000, 1000);\r\n    }\r\n\r\n    @FXML\r\n    void handlePauseButton() {\r\n        gamePaused = !gamePaused;\r\n        if (gamePaused) {\r\n            gameLoop.pause();\r\n            if (isNormalMode) {\r\n                countdownTimer.cancel();\r\n            }\r\n            mediaPlayer.pause();\r\n            LoggerUtil.logInfo(\"Game paused\");\r\n        } else {\r\n            if (isNormalMode) {\r\n                startCountdown();\r\n            }\r\n            gameLoop.play();\r\n            if (isMusicPlaying) {\r\n                mediaPlayer.play();\r\n            }\r\n            LoggerUtil.logInfo(\"Game resumed\");\r\n        }\r\n        gameCanvas.requestFocus();\r\n    }\r\n\r\n    void endGame() {\r\n        gameLoop.stop();\r\n        if (isNormalMode) {\r\n            countdownTimer.cancel();\r\n        }\r\n        mediaPlayer.pause();\r\n        if (isNormalMode && score > 0) {\r\n            saveScore();\r\n        }\r\n        showGameOverScreen(score, gameCanvas);\r\n    }\r\n\r\n    void saveScore() {\r\n        try {\r\n            userDAO.saveScore(getUsername(), score, false);\r\n            LoggerUtil.logInfo(\"Score saved for user: \" + getUsername() + \", score: \" + score);\r\n        } catch (SQLException e) {\r\n            LoggerUtil.logSevere(\"Error saving score for user: \" + getUsername());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleQuitButton() {\r\n        gameLoop.stop();\r\n        if (isNormalMode) {\r\n            countdownTimer.cancel();\r\n        }\r\n        mediaPlayer.pause();\r\n        navigateTo(MAIN_MENU, gameCanvas);\r\n    }\r\n\r\n    public int getScore() {\r\n        return this.score;\r\n    }\r\n\r\n    public void setScore(int i) {\r\n        this.score = i;\r\n    }\r\n\r\n    public int getLevel() {\r\n        return this.level;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/GameController.java b/src/main/java/controller/GameController.java
--- a/src/main/java/controller/GameController.java	
+++ b/src/main/java/controller/GameController.java	
@@ -18,46 +18,48 @@
 import javafx.scene.media.MediaPlayer;
 import javafx.stage.Stage;
 import javafx.util.Duration;
-import model.*;
-import model.falling.BlackFruit;
-import model.falling.BonusTime;
-import model.falling.FallingObject;
-import model.falling.Fruit;
-import model.falling.Leaf;
-import model.falling.ScoreMultiplier;
+import model.game.Basket;
+import model.game.BlackFruit;
+import model.game.BonusTime;
+import model.game.FallingObject;
+import model.game.Fruit;
+import model.game.GameLevel;
+import model.game.Leaf;
+import model.game.MovingCloud;
+import model.game.ScoreMultiplier;
 import model.user.UserDAO;
-import utils.Difficulty;
-import utils.GameMode;
-import utils.LoggerUtil;
-import utils.PreferencesUtil;
+import util.Difficulty;
+import util.GameMode;
+import util.LoggerUtil;
+import util.PreferencesUtil;
 
 import java.net.URL;
 import java.sql.SQLException;
 import java.util.*;
 
-import static utils.ResourcePaths.IMAGE_CLOUD_1_PNG;
-import static utils.ResourcePaths.IMAGE_CLOUD_2_PNG;
-import static utils.ResourcePaths.IMAGE_CLOUD_3_PNG;
-import static utils.ResourcePaths.SOUND_DEZERT_MP_3;
-import static utils.SceneConstants.BACKGROUND;
-import static utils.SceneConstants.DIFFICULTY;
-import static utils.SceneConstants.DISABLE_BACKGROUND;
-import static utils.SceneConstants.ENABLE_BACKGROUND;
-import static utils.SceneConstants.GAME_MODE;
-import static utils.SceneConstants.LEFT;
-import static utils.SceneConstants.LEFT_ARROW;
-import static utils.SceneConstants.LEFT_KEY;
-import static utils.SceneConstants.MUSIC;
-import static utils.SceneConstants.PAUSE;
-import static utils.SceneConstants.PAUSE_MUSIC;
-import static utils.SceneConstants.PLAY_MUSIC;
-import static utils.SceneConstants.QUIT;
-import static utils.SceneConstants.RIGHT;
-import static utils.SceneConstants.RIGHT_ARROW;
-import static utils.SceneConstants.RIGHT_KEY;
-import static utils.SceneConstants.SCORE;
-import static utils.SceneConstants.TIMER;
-import static utils.FXMLPaths.MAIN_MENU;
+import static util.ResourcePaths.IMAGE_CLOUD_1_PNG;
+import static util.ResourcePaths.IMAGE_CLOUD_2_PNG;
+import static util.ResourcePaths.IMAGE_CLOUD_3_PNG;
+import static util.ResourcePaths.SOUND_DEZERT_MP_3;
+import static util.SceneConstants.BACKGROUND;
+import static util.SceneConstants.DIFFICULTY;
+import static util.SceneConstants.DISABLE_BACKGROUND;
+import static util.SceneConstants.ENABLE_BACKGROUND;
+import static util.SceneConstants.GAME_MODE;
+import static util.SceneConstants.LEFT;
+import static util.SceneConstants.LEFT_ARROW;
+import static util.SceneConstants.LEFT_KEY;
+import static util.SceneConstants.MUSIC;
+import static util.SceneConstants.PAUSE;
+import static util.SceneConstants.PAUSE_MUSIC;
+import static util.SceneConstants.PLAY_MUSIC;
+import static util.SceneConstants.QUIT;
+import static util.SceneConstants.RIGHT;
+import static util.SceneConstants.RIGHT_ARROW;
+import static util.SceneConstants.RIGHT_KEY;
+import static util.SceneConstants.SCORE;
+import static util.SceneConstants.TIMER;
+import static util.FXMLPaths.MAIN_MENU;
 
 public class GameController extends BaseController implements Initializable {
 
Index: src/main/java/model/falling/FallingObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/falling/FallingObject.java b/src/main/java/model/game/FallingObject.java
rename from src/main/java/model/falling/FallingObject.java
rename to src/main/java/model/game/FallingObject.java
--- a/src/main/java/model/falling/FallingObject.java	
+++ b/src/main/java/model/game/FallingObject.java	
@@ -1,8 +1,7 @@
-package model.falling;
+package model.game;
 
 import javafx.scene.canvas.GraphicsContext;
 import javafx.scene.image.Image;
-import model.Basket;
 
 import java.util.Objects;
 
Index: src/main/java/exceptions/ResourceNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/exceptions/ResourceNotFoundException.java b/src/main/java/exception/ResourceNotFoundException.java
rename from src/main/java/exceptions/ResourceNotFoundException.java
rename to src/main/java/exception/ResourceNotFoundException.java
--- a/src/main/java/exceptions/ResourceNotFoundException.java	
+++ b/src/main/java/exception/ResourceNotFoundException.java	
@@ -1,4 +1,4 @@
-package exceptions;
+package exception;
 
 public class ResourceNotFoundException extends RuntimeException {
     public ResourceNotFoundException(String message) {
Index: src/main/java/exceptions/ConfigException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/exceptions/ConfigException.java b/src/main/java/exception/ConfigException.java
rename from src/main/java/exceptions/ConfigException.java
rename to src/main/java/exception/ConfigException.java
--- a/src/main/java/exceptions/ConfigException.java	
+++ b/src/main/java/exception/ConfigException.java	
@@ -1,4 +1,4 @@
-package exceptions;
+package exception;
 
 public class ConfigException extends RuntimeException {
     public ConfigException(String message) {
Index: src/main/java/controller/MainMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.stage.Stage;\r\nimport model.user.UserDAO;\r\nimport utils.FXMLPaths;\r\nimport utils.LoggerUtil;\r\nimport utils.UserSession;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.util.ResourceBundle;\r\n\r\nimport static utils.SceneConstants.CHANGE_PASSWORD;\r\nimport static utils.FXMLPaths.DELETE_ACCOUNT_CONFIRMATION;\r\nimport static utils.FXMLPaths.GAME;\r\nimport static utils.FXMLPaths.LOGIN;\r\nimport static utils.SceneConstants.SETTINGS;\r\nimport static utils.SceneConstants.DELETE_ACCOUNT;\r\nimport static utils.SceneConstants.DESCRIPTION;\r\nimport static utils.SceneConstants.LOGGED_IN_AS;\r\nimport static utils.SceneConstants.LOGOUT;\r\nimport static utils.SceneConstants.PLAYER_RANKINGS;\r\nimport static utils.SceneConstants.PLAYER_RESULTS;\r\nimport static utils.SceneConstants.QUIT;\r\nimport static utils.SceneConstants.START_GAME;\r\n\r\npublic class MainMenuController extends BaseController implements Initializable {\r\n\r\n\r\n    @FXML\r\n    private Label loggedInAsLabel;\r\n\r\n    @FXML\r\n    private Label usernameLabel;\r\n\r\n    @FXML\r\n    private Button startGameButton;\r\n\r\n    @FXML\r\n    private Button descriptionButton;\r\n\r\n    @FXML\r\n    private Button playerResultsButton;\r\n\r\n    @FXML\r\n    private Button playerRankingsButton;\r\n\r\n    @FXML\r\n    private Button settingsButton;\r\n\r\n    @FXML\r\n    private Button changePasswordButton;\r\n\r\n    @FXML\r\n    private Button logoutButton;\r\n\r\n    @FXML\r\n    private Button quitButton;\r\n\r\n    @FXML\r\n    private Button deleteAccountButton;\r\n\r\n    @FXML\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        setMultilingualElement(loggedInAsLabel, LOGGED_IN_AS);\r\n        setMultilingualElement(startGameButton, START_GAME);\r\n        setMultilingualElement(descriptionButton, DESCRIPTION);\r\n        setMultilingualElement(playerResultsButton, PLAYER_RESULTS);\r\n        setMultilingualElement(playerRankingsButton, PLAYER_RANKINGS);\r\n        setMultilingualElement(settingsButton, SETTINGS);\r\n        setMultilingualElement(changePasswordButton, CHANGE_PASSWORD);\r\n        setMultilingualElement(logoutButton, LOGOUT);\r\n        setMultilingualElement(quitButton, QUIT);\r\n        setMultilingualElement(deleteAccountButton, DELETE_ACCOUNT);\r\n        usernameLabel.setText(getUsername());\r\n    }\r\n\r\n    @FXML\r\n    private void handleStartGameButton(ActionEvent event) {\r\n        navigateTo(GAME, event);\r\n    }\r\n\r\n    @FXML\r\n    private void handleDescriptionButton(ActionEvent event) {\r\n        navigateTo(FXMLPaths.DESCRIPTION, event);\r\n    }\r\n\r\n    @FXML\r\n    private void handlePlayerResultsButton(ActionEvent event) {\r\n        navigateTo(FXMLPaths.PLAYER_RESULTS, event);\r\n    }\r\n\r\n    @FXML\r\n    private void handlePlayerRankingsButton(ActionEvent event) {\r\n        navigateTo(FXMLPaths.PLAYER_RANKINGS, event);\r\n    }\r\n\r\n    @FXML\r\n    private void handleSettingsButton(ActionEvent event) {\r\n        navigateTo(FXMLPaths.SETTINGS, event);\r\n    }\r\n\r\n    @FXML\r\n    private void handleQuitButton(ActionEvent event) {\r\n        Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\r\n        stage.close();\r\n    }\r\n\r\n    @FXML\r\n    private void handleChangePasswordButton(ActionEvent event) {\r\n        navigateTo(FXMLPaths.CHANGE_PASSWORD, event);\r\n    }\r\n\r\n    @FXML\r\n    private void handleLogoutButton(ActionEvent event) {\r\n        navigateTo(LOGIN, event);\r\n    }\r\n\r\n    @FXML\r\n    private void handleDeleteAccountButton(ActionEvent event) {\r\n        try {\r\n            FXMLLoader loader = navigateToDialog(DELETE_ACCOUNT_CONFIRMATION, event);\r\n\r\n            ConfirmationDialogController controller = loader.getController();\r\n            if (controller.isConfirmed()) {\r\n                deleteUserAccount(event);\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    private void deleteUserAccount(ActionEvent event) {\r\n        try {\r\n            UserDAO userDAO = new UserDAO();\r\n            userDAO.deleteUser(getUsername(), false);\r\n            LoggerUtil.logInfo(\"Account deleted for user: \" + getUsername());\r\n            // Log out and navigate to login screen\r\n            UserSession.getInstance().setUsername(null);\r\n            navigateTo(LOGIN, event);\r\n        } catch (SQLException e) {\r\n            LoggerUtil.logSevere(\"Error deleting account for user: \" + getUsername());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/MainMenuController.java b/src/main/java/controller/MainMenuController.java
--- a/src/main/java/controller/MainMenuController.java	
+++ b/src/main/java/controller/MainMenuController.java	
@@ -8,28 +8,28 @@
 import javafx.scene.control.Label;
 import javafx.stage.Stage;
 import model.user.UserDAO;
-import utils.FXMLPaths;
-import utils.LoggerUtil;
-import utils.UserSession;
+import util.FXMLPaths;
+import util.LoggerUtil;
+import util.UserSession;
 
 import java.io.IOException;
 import java.net.URL;
 import java.sql.SQLException;
 import java.util.ResourceBundle;
 
-import static utils.SceneConstants.CHANGE_PASSWORD;
-import static utils.FXMLPaths.DELETE_ACCOUNT_CONFIRMATION;
-import static utils.FXMLPaths.GAME;
-import static utils.FXMLPaths.LOGIN;
-import static utils.SceneConstants.SETTINGS;
-import static utils.SceneConstants.DELETE_ACCOUNT;
-import static utils.SceneConstants.DESCRIPTION;
-import static utils.SceneConstants.LOGGED_IN_AS;
-import static utils.SceneConstants.LOGOUT;
-import static utils.SceneConstants.PLAYER_RANKINGS;
-import static utils.SceneConstants.PLAYER_RESULTS;
-import static utils.SceneConstants.QUIT;
-import static utils.SceneConstants.START_GAME;
+import static util.SceneConstants.CHANGE_PASSWORD;
+import static util.FXMLPaths.DELETE_ACCOUNT_CONFIRMATION;
+import static util.FXMLPaths.GAME;
+import static util.FXMLPaths.LOGIN;
+import static util.SceneConstants.SETTINGS;
+import static util.SceneConstants.DELETE_ACCOUNT;
+import static util.SceneConstants.DESCRIPTION;
+import static util.SceneConstants.LOGGED_IN_AS;
+import static util.SceneConstants.LOGOUT;
+import static util.SceneConstants.PLAYER_RANKINGS;
+import static util.SceneConstants.PLAYER_RESULTS;
+import static util.SceneConstants.QUIT;
+import static util.SceneConstants.START_GAME;
 
 public class MainMenuController extends BaseController implements Initializable {
 
Index: src/main/java/controller/PlayerResultsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\n\r\nimport java.net.URL;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\nimport model.database.Database;\r\nimport model.Score;\r\nimport utils.SceneConstants;\r\n\r\nimport static utils.FXMLPaths.MAIN_MENU;\r\nimport static utils.SceneConstants.SCORE;\r\nimport static utils.SceneConstants.TIMER;\r\nimport static utils.SceneConstants.TIMESTAMP;\r\n\r\npublic class PlayerResultsController extends BaseController implements Initializable {\r\n\r\n    @FXML\r\n    public Label topScores;\r\n    @FXML\r\n    private TableView<Score> resultsTable;\r\n\r\n    @FXML\r\n    private TableColumn<Score, Integer> scoreColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Score, String> dateColumn;\r\n\r\n    @FXML\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        setMultilingualElement(topScores, SceneConstants.TOP_SCORES);\r\n        scoreColumn.setCellValueFactory(new PropertyValueFactory<>(SCORE));\r\n        setMultilingualElement(scoreColumn, SCORE);\r\n        dateColumn.setCellValueFactory(new PropertyValueFactory<>(TIMESTAMP));\r\n        setMultilingualElement(dateColumn, TIMER);\r\n        loadScores();\r\n    }\r\n\r\n    private void loadScores() {\r\n        try {\r\n            resultsTable.setItems(getTopScores(getUsername()));\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleBackToMainMenuButton(ActionEvent event) {\r\n        navigateTo(MAIN_MENU, event);\r\n    }\r\n\r\n    private ObservableList<Score> getTopScores(String username) throws SQLException {\r\n        List<Score> scoreList = new ArrayList<>();\r\n        String query = \"SELECT score, timestamp FROM scores WHERE username = ? ORDER BY score DESC LIMIT 10\";\r\n        Connection connection = Database.getConnection();\r\n        try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n            statement.setString(1, username);\r\n            ResultSet resultSet = statement.executeQuery();\r\n            while (resultSet.next()) {\r\n                int score = resultSet.getInt(SCORE);\r\n                String date = resultSet.getString(TIMESTAMP);\r\n                scoreList.add(new Score(username, score, date));\r\n            }\r\n        }\r\n        return FXCollections.observableArrayList(scoreList);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/PlayerResultsController.java b/src/main/java/controller/PlayerResultsController.java
--- a/src/main/java/controller/PlayerResultsController.java	
+++ b/src/main/java/controller/PlayerResultsController.java	
@@ -20,13 +20,13 @@
 import java.util.ResourceBundle;
 
 import model.database.Database;
-import model.Score;
-import utils.SceneConstants;
+import model.score.Score;
+import util.SceneConstants;
 
-import static utils.FXMLPaths.MAIN_MENU;
-import static utils.SceneConstants.SCORE;
-import static utils.SceneConstants.TIMER;
-import static utils.SceneConstants.TIMESTAMP;
+import static util.FXMLPaths.MAIN_MENU;
+import static util.SceneConstants.SCORE;
+import static util.SceneConstants.TIMER;
+import static util.SceneConstants.TIMESTAMP;
 
 public class PlayerResultsController extends BaseController implements Initializable {
 
Index: src/main/java/controller/ChangePasswordController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport exceptions.HashException;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.PasswordField;\r\n\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.util.ResourceBundle;\r\n\r\nimport model.user.User;\r\nimport model.user.UserDAO;\r\nimport utils.LoggerUtil;\r\n\r\nimport static utils.FXMLPaths.MAIN_MENU;\r\nimport static utils.SceneConstants.BACK_TO_MAIN_MENU;\r\nimport static utils.SceneConstants.CHANGE_PASSWORD;\r\nimport static utils.SceneConstants.CURRENT_PASSWORD;\r\nimport static utils.SceneConstants.CURRENT_PASSWORD_IS_INCORRECT;\r\nimport static utils.SceneConstants.NEW_PASSWORD;\r\nimport static utils.SceneConstants.CONFIRM_NEW_PASSWORD;\r\nimport static utils.SceneConstants.PASSWORDS_DO_NOT_MATCH;\r\n\r\npublic class ChangePasswordController extends BaseController implements Initializable {\r\n\r\n    @FXML\r\n    private Button changePasswordButton;\r\n\r\n    @FXML\r\n    private Button backToMainMenuButton;\r\n\r\n    @FXML\r\n    private PasswordField oldPasswordField;\r\n\r\n    @FXML\r\n    private PasswordField newPasswordField;\r\n\r\n    @FXML\r\n    private PasswordField confirmPasswordField;\r\n\r\n    @FXML\r\n    private Label errorMessage;\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        setMultilingualPromptElement(oldPasswordField, CURRENT_PASSWORD);\r\n        setMultilingualPromptElement(newPasswordField, NEW_PASSWORD);\r\n        setMultilingualPromptElement(confirmPasswordField, CONFIRM_NEW_PASSWORD);\r\n        setMultilingualElement(changePasswordButton, CHANGE_PASSWORD);\r\n        setMultilingualElement(backToMainMenuButton, BACK_TO_MAIN_MENU);\r\n    }\r\n\r\n    @FXML\r\n    private void handleChangePasswordButton(ActionEvent event) {\r\n        String oldPassword = oldPasswordField.getText();\r\n        String newPassword = newPasswordField.getText();\r\n        String confirmPassword = confirmPasswordField.getText();\r\n\r\n        if (!newPassword.equals(confirmPassword)) {\r\n            setMultilingualElement(errorMessage, PASSWORDS_DO_NOT_MATCH);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            UserDAO userDAO = new UserDAO();\r\n            User user = userDAO.getUser(getUsername(), false);\r\n\r\n            if (user == null) {\r\n                LoggerUtil.logInfo(\"User not found: \" + getUsername());\r\n                return;\r\n            }\r\n\r\n            String hashedOldPassword = hashPassword(oldPassword);\r\n\r\n            if (user.getPassword().equals(hashedOldPassword)) {\r\n                String hashedNewPassword = hashPassword(newPassword);\r\n                user.setPassword(hashedNewPassword);\r\n                userDAO.updateUser(user, false);\r\n                LoggerUtil.logInfo(\"Password changed successfully\");\r\n\r\n                // Navigate back to main menu\r\n                navigateTo(MAIN_MENU, event);\r\n            } else {\r\n                setMultilingualElement(errorMessage,  CURRENT_PASSWORD_IS_INCORRECT);\r\n            }\r\n        } catch (SQLException | HashException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleBackToMainMenuButton(ActionEvent event) {\r\n        navigateTo(MAIN_MENU, event);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/ChangePasswordController.java b/src/main/java/controller/ChangePasswordController.java
--- a/src/main/java/controller/ChangePasswordController.java	
+++ b/src/main/java/controller/ChangePasswordController.java	
@@ -1,6 +1,6 @@
 package controller;
 
-import exceptions.HashException;
+import exception.HashException;
 import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
 import javafx.fxml.Initializable;
@@ -14,16 +14,16 @@
 
 import model.user.User;
 import model.user.UserDAO;
-import utils.LoggerUtil;
+import util.LoggerUtil;
 
-import static utils.FXMLPaths.MAIN_MENU;
-import static utils.SceneConstants.BACK_TO_MAIN_MENU;
-import static utils.SceneConstants.CHANGE_PASSWORD;
-import static utils.SceneConstants.CURRENT_PASSWORD;
-import static utils.SceneConstants.CURRENT_PASSWORD_IS_INCORRECT;
-import static utils.SceneConstants.NEW_PASSWORD;
-import static utils.SceneConstants.CONFIRM_NEW_PASSWORD;
-import static utils.SceneConstants.PASSWORDS_DO_NOT_MATCH;
+import static util.FXMLPaths.MAIN_MENU;
+import static util.SceneConstants.BACK_TO_MAIN_MENU;
+import static util.SceneConstants.CHANGE_PASSWORD;
+import static util.SceneConstants.CURRENT_PASSWORD;
+import static util.SceneConstants.CURRENT_PASSWORD_IS_INCORRECT;
+import static util.SceneConstants.NEW_PASSWORD;
+import static util.SceneConstants.CONFIRM_NEW_PASSWORD;
+import static util.SceneConstants.PASSWORDS_DO_NOT_MATCH;
 
 public class ChangePasswordController extends BaseController implements Initializable {
 
Index: src/main/java/controller/ConfirmationDialogController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.stage.Stage;\r\nimport utils.SceneConstants;\r\n\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\nimport static utils.SceneConstants.NO;\r\nimport static utils.SceneConstants.YES;\r\n\r\npublic class ConfirmationDialogController extends BaseController implements Initializable {\r\n\r\n    @FXML\r\n    public Label confirmDeleteAccount;\r\n    @FXML\r\n    private Button yesButton;\r\n\r\n    @FXML\r\n    private Button noButton;\r\n    private boolean confirmed = false;\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        setMultilingualElement(confirmDeleteAccount, SceneConstants.CONFIRM_DELETE_ACCOUNT);\r\n        setMultilingualElement(yesButton, YES);\r\n        setMultilingualElement(noButton, NO);\r\n    }\r\n\r\n    @FXML\r\n    private void handleYesButton(ActionEvent event) {\r\n        confirmed = true;\r\n        closeDialog(event);\r\n    }\r\n\r\n    @FXML\r\n    private void handleNoButton(ActionEvent event) {\r\n        confirmed = false;\r\n        closeDialog(event);\r\n    }\r\n\r\n    private void closeDialog(ActionEvent event) {\r\n        Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();\r\n        stage.close();\r\n    }\r\n\r\n    public boolean isConfirmed() {\r\n        return confirmed;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/ConfirmationDialogController.java b/src/main/java/controller/ConfirmationDialogController.java
--- a/src/main/java/controller/ConfirmationDialogController.java	
+++ b/src/main/java/controller/ConfirmationDialogController.java	
@@ -6,13 +6,13 @@
 import javafx.scene.control.Button;
 import javafx.scene.control.Label;
 import javafx.stage.Stage;
-import utils.SceneConstants;
+import util.SceneConstants;
 
 import java.net.URL;
 import java.util.ResourceBundle;
 
-import static utils.SceneConstants.NO;
-import static utils.SceneConstants.YES;
+import static util.SceneConstants.NO;
+import static util.SceneConstants.YES;
 
 public class ConfirmationDialogController extends BaseController implements Initializable {
 
Index: src/test/java/controller/GameControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.animation.Animation;\r\nimport javafx.application.Platform;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.media.MediaPlayer;\r\nimport model.Basket;\r\nimport model.falling.BlackFruit;\r\nimport model.falling.Fruit;\r\nimport model.falling.Leaf;\r\nimport model.GameLevel;\r\nimport model.falling.ScoreMultiplier;\r\nimport model.user.UserDAO;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\nimport org.testfx.framework.junit5.ApplicationTest;\r\nimport org.testfx.util.WaitForAsyncUtils;\r\nimport utils.ConfigUtil;\r\nimport utils.UserSession;\r\n\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.concurrent.CountDownLatch;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\r\nimport static org.junit.jupiter.api.Assertions.assertSame;\r\nimport static org.junit.jupiter.api.Assertions.assertTrue;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass GameControllerTest extends ApplicationTest {\r\n\r\n    @Mock\r\n    private UserDAO userDAO;\r\n\r\n    @Mock\r\n    private UserSession userSession;\r\n\r\n    @InjectMocks\r\n    private GameController gameController;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n        ConfigUtil.loadTestConfig();\r\n        when(userSession.getUsername()).thenReturn(\"testuser\");\r\n\r\n        // Initialize necessary GameController attributes\r\n        gameController.userDAO = userDAO;\r\n        gameController.score = 0;\r\n        gameController.doublePointsActive = false;\r\n        gameController.basket = new Basket(300, 500, 50, 50, false);\r\n        gameController.level = 0;\r\n        gameController.fallingObjects = new ArrayList<>();\r\n        gameController.clouds = new ArrayList<>();\r\n\r\n        // Mocking the game canvas\r\n        gameController.gameCanvas = new Canvas(800, 600);\r\n\r\n        // Initialize FXML elements\r\n        gameController.scoreLabel = new Label();\r\n        gameController.timerLabel = new Label();\r\n        gameController.toggleBackgroundButton = new Button();\r\n        gameController.toggleMusicButton = new Button();\r\n        gameController.pauseButton = new Button();\r\n        gameController.quitButton = new Button();\r\n        gameController.logTextArea = new TextArea();\r\n\r\n        // Setting up levels\r\n        gameController.levels = new ArrayList<>();\r\n        gameController.levels.add(new GameLevel(1.0, 1.0, 10.0, 10.0, 0.01, 0.005));\r\n        gameController.levels.add(new GameLevel(1.5, 1.5, 8.0, 12.0, 0.02, 0.01));\r\n    }\r\n\r\n    @Test\r\n    void testAddFruitToScore() {\r\n        // Arrange\r\n        Fruit fruit = new Fruit(300, 500, 1, 50, 50);\r\n        fruit.setCaught(false);\r\n\r\n        // Act\r\n        gameController.manageColliding(fruit);\r\n\r\n        // Assert\r\n        assertEquals(10, gameController.getScore());\r\n    }\r\n\r\n    @Test\r\n    void testAddLeafToScore() {\r\n        // Arrange\r\n        Leaf leaf = new Leaf(300, 500, 1, 50, 50);\r\n        leaf.setCaught(false);\r\n\r\n        // Act\r\n        gameController.manageColliding(leaf);\r\n\r\n        // Assert\r\n        assertEquals(-5, gameController.getScore());\r\n    }\r\n\r\n    @Test\r\n    void testActivateDoublePoints() {\r\n        // Arrange\r\n        gameController.doublePointsActive = false;\r\n\r\n        // Act\r\n        runLater(() -> gameController.activateDoublePoints());\r\n\r\n        // Assert\r\n        assertTrue(gameController.doublePointsActive);\r\n    }\r\n\r\n    @Test\r\n    void testLevelUp() {\r\n        // Arrange\r\n        gameController.level = 0;\r\n\r\n        // Act\r\n        gameController.levelUp();\r\n\r\n        // Assert\r\n        assertEquals(1, gameController.getLevel());\r\n    }\r\n\r\n    @Test\r\n    void testSaveScore() throws SQLException {\r\n        // Arrange\r\n        gameController.setScore(100);\r\n\r\n        // Act\r\n        gameController.saveScore();\r\n\r\n        // Assert\r\n        verify(userDAO).saveScore(null, 100, false);\r\n    }\r\n\r\n    private void runLater(Runnable action) {\r\n        try {\r\n            Platform.runLater(action);\r\n            // Wait for the runLater to finish\r\n            Thread.sleep(100);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void testUpdateGame() {\r\n        // Arrange\r\n        Fruit fruit = new Fruit(300, 0, 1, 50, 50);\r\n        Leaf leaf = new Leaf(300, 0, 1, 50, 50);\r\n        fruit.setCaught(false);\r\n        leaf.setCaught(false);\r\n        gameController.fallingObjects.add(fruit);\r\n        gameController.fallingObjects.add(leaf);\r\n        gameController.basket = new Basket(300, 500, 50, 50, false);\r\n\r\n        // Act\r\n        runLater(() -> gameController.updateGame());\r\n\r\n        // Assert\r\n        assertEquals(2, gameController.fallingObjects.size());\r\n        assertTrue(gameController.fallingObjects.contains(fruit));\r\n        assertTrue(gameController.fallingObjects.contains(leaf));\r\n    }\r\n\r\n    @Test\r\n    void testSpawnNewFallingObjects() {\r\n        // Temporarily override the shouldSpawn method to always return true\r\n        gameController = spy(gameController);\r\n        doReturn(true).when(gameController).shouldSpawn(anyDouble());\r\n\r\n        // Act\r\n        Platform.runLater(() -> {\r\n            // Ensure canvas dimensions are set correctly before spawning objects\r\n            gameController.gameCanvas.setWidth(800);\r\n            gameController.gameCanvas.setHeight(600);\r\n\r\n            gameController.spawnNewFallingObjects();\r\n\r\n            // Assert\r\n            assertEquals(4, gameController.fallingObjects.size()); // Expecting each of every falling object\r\n            assertTrue(gameController.fallingObjects.get(0) instanceof Fruit);\r\n            assertTrue(gameController.fallingObjects.get(1) instanceof Leaf);\r\n            assertTrue(gameController.fallingObjects.get(2) instanceof ScoreMultiplier);\r\n            assertTrue(gameController.fallingObjects.get(3) instanceof BlackFruit);\r\n        });\r\n\r\n        // Wait for the runLater to finish\r\n        WaitForAsyncUtils.waitForFxEvents();\r\n    }\r\n\r\n    @Test\r\n    void testHandleKeyPress() {\r\n        // Arrange\r\n        gameController.basket = spy(new Basket(300, 500, 50, 50, false));\r\n        gameController.loadControlKeys();\r\n        KeyEvent leftKeyEvent = new KeyEvent(KeyEvent.KEY_PRESSED, \"\", \"\", gameController.leftKey, false, false, false, false);\r\n        KeyEvent rightKeyEvent = new KeyEvent(KeyEvent.KEY_PRESSED, \"\", \"\", gameController.rightKey, false, false, false, false);\r\n\r\n        // Act\r\n        runLater(() -> {\r\n            gameController.handleKeyPress(leftKeyEvent);\r\n            gameController.handleKeyPress(rightKeyEvent);\r\n        });\r\n\r\n        // Assert\r\n        verify(gameController.basket, times(1)).moveLeft();\r\n        verify(gameController.basket, times(1)).moveRight();\r\n    }\r\n\r\n    @Test\r\n    void testHandleKeyRelease() {\r\n        // Arrange\r\n        gameController.basket = spy(new Basket(300, 500, 50, 50, false));\r\n        gameController.loadControlKeys();\r\n        KeyEvent leftKeyEvent = new KeyEvent(KeyEvent.KEY_RELEASED, \"\", \"\", gameController.leftKey, false, false, false, false);\r\n        KeyEvent rightKeyEvent = new KeyEvent(KeyEvent.KEY_RELEASED, \"\", \"\", gameController.rightKey, false, false, false, false);\r\n\r\n        // Act\r\n        runLater(() -> {\r\n            gameController.handleKeyRelease(leftKeyEvent);\r\n            gameController.handleKeyRelease(rightKeyEvent);\r\n        });\r\n\r\n        // Assert\r\n        verify(gameController.basket, times(2)).stop();\r\n    }\r\n\r\n    @Test\r\n    void testEndGame() {\r\n        // Arrange\r\n        gameController = spy(gameController);\r\n        gameController.setScore(100);\r\n        doNothing().when(gameController).showGameOverScreen(anyInt(), any(Canvas.class));\r\n\r\n        // Act\r\n        runLater(() -> {\r\n            gameController.setupMusic(); // Ensure mediaPlayer is initialized\r\n            gameController.startGame(); // Ensure the gameLoop is initialized\r\n\r\n            // Wait a short time to ensure the gameLoop is running\r\n            WaitForAsyncUtils.sleep(100, TimeUnit.MILLISECONDS);\r\n\r\n            gameController.endGame();\r\n        });\r\n\r\n        // Wait for the endGame actions to complete\r\n        WaitForAsyncUtils.waitForFxEvents();\r\n\r\n        // Assert\r\n        assertSame(Animation.Status.STOPPED, gameController.gameLoop.getStatus());\r\n        verify(gameController, times(1)).showGameOverScreen(eq(100), any(Canvas.class));\r\n    }\r\n\r\n    @Test\r\n    void testHandlePauseButton() {\r\n        // Arrange\r\n        gameController.setScore(100);\r\n        gameController.gamePaused = false;\r\n\r\n        // Act\r\n        runLater(() -> {\r\n            gameController.setupMusic(); // Ensure mediaPlayer is initialized\r\n            gameController.startGame(); // Ensure the gameLoop is initialized\r\n            gameController.handlePauseButton();\r\n\r\n            WaitForAsyncUtils.sleep(100, TimeUnit.MILLISECONDS);\r\n        });\r\n\r\n        // Assert\r\n        assertTrue(gameController.gamePaused);\r\n        assertEquals(Animation.Status.PAUSED, gameController.gameLoop.getStatus());\r\n    }\r\n\r\n    @Test\r\n    void testSetupMusic() {\r\n        CountDownLatch latch = new CountDownLatch(1);\r\n\r\n        // Act\r\n        runLater(() -> {\r\n            gameController.setupMusic();\r\n            gameController.mediaPlayer.setOnReady(() -> {\r\n                gameController.mediaPlayer.play();\r\n                gameController.mediaPlayer.pause();\r\n                latch.countDown();\r\n            });\r\n        });\r\n\r\n        // Wait for the mediaPlayer to reach the PAUSED state\r\n        try {\r\n            latch.await(5, TimeUnit.SECONDS);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        // Retry mechanism to ensure the MediaPlayer reaches the PAUSED state\r\n        boolean pausedStateReached = false;\r\n        for (int i = 0; i < 10; i++) { // Retry 10 times\r\n            if (gameController.mediaPlayer.getStatus() == MediaPlayer.Status.PAUSED) {\r\n                pausedStateReached = true;\r\n                break;\r\n            }\r\n            try {\r\n                Thread.sleep(200); // Wait 200 milliseconds before retrying\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        // Assert\r\n        assertNotNull(gameController.mediaPlayer);\r\n        assertTrue(pausedStateReached, \"MediaPlayer did not reach PAUSED state\");\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/controller/GameControllerTest.java b/src/test/java/controller/GameControllerTest.java
--- a/src/test/java/controller/GameControllerTest.java	
+++ b/src/test/java/controller/GameControllerTest.java	
@@ -8,12 +8,12 @@
 import javafx.scene.control.TextArea;
 import javafx.scene.input.KeyEvent;
 import javafx.scene.media.MediaPlayer;
-import model.Basket;
-import model.falling.BlackFruit;
-import model.falling.Fruit;
-import model.falling.Leaf;
-import model.GameLevel;
-import model.falling.ScoreMultiplier;
+import model.game.Basket;
+import model.game.BlackFruit;
+import model.game.Fruit;
+import model.game.Leaf;
+import model.game.GameLevel;
+import model.game.ScoreMultiplier;
 import model.user.UserDAO;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -22,8 +22,8 @@
 import org.mockito.MockitoAnnotations;
 import org.testfx.framework.junit5.ApplicationTest;
 import org.testfx.util.WaitForAsyncUtils;
-import utils.ConfigUtil;
-import utils.UserSession;
+import util.ConfigUtil;
+import util.UserSession;
 
 import java.sql.SQLException;
 import java.util.ArrayList;
Index: src/main/resources/view/admin.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/view/admin.fxml b/src/main/resources/view/scene/admin.fxml
rename from src/main/resources/view/admin.fxml
rename to src/main/resources/view/scene/admin.fxml
--- a/src/main/resources/view/admin.fxml	
+++ b/src/main/resources/view/scene/admin.fxml	
@@ -6,7 +6,7 @@
 <?import javafx.scene.control.TableView?>
 <?import javafx.scene.layout.VBox?>
 
-<VBox xmlns="http://javafx.com/javafx" xmlns:fx="http://javafx.com/fxml" fx:controller="controller.AdminController" spacing="10" alignment="CENTER" stylesheets="@forest.css" styleClass="vbox-center" maxWidth="300" prefWidth="300" >
+<VBox xmlns="http://javafx.com/javafx" xmlns:fx="http://javafx.com/fxml" fx:controller="controller.AdminController" spacing="10" alignment="CENTER" stylesheets="@../style/forest.css" styleClass="vbox-center" maxWidth="300" prefWidth="300" >
     <Label text="Admin Panel" styleClass="label"/>
     <TableView fx:id="usersTable" styleClass="table-view">
         <columns>
Index: src/main/java/util/UserRole.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/UserRole.java b/src/main/java/util/UserRole.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/UserRole.java	
@@ -0,0 +1,13 @@
+package util;
+
+public enum UserRole {
+    ADMIN("admin"),
+    USER("user");
+
+    private final String role;
+    UserRole(final String role) {
+        this.role = role;
+    }
+
+    public String value() { return this.role; }
+}
Index: src/main/java/controller/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport model.user.User;\r\nimport model.user.UserDAO;\r\nimport utils.LoggerUtil;\r\n\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.util.ResourceBundle;\r\n\r\nimport static utils.FXMLPaths.LOGIN;\r\n\r\npublic class AdminController extends BaseController {\r\n\r\n    @FXML\r\n    private TableView<User> usersTable;\r\n\r\n    @FXML\r\n    private TableColumn<User, String> usernameColumn;\r\n\r\n    @FXML\r\n    private TableColumn<User, String> statusColumn;\r\n\r\n    private ObservableList<User> usersList;\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        super.initialize(url, resourceBundle);\r\n        usernameColumn.setCellValueFactory(new PropertyValueFactory<>(\"username\"));\r\n        statusColumn.setCellValueFactory(new PropertyValueFactory<>(\"status\"));\r\n        usersList = FXCollections.observableArrayList();\r\n        loadUsers();\r\n    }\r\n\r\n    private void loadUsers() {\r\n        try {\r\n            UserDAO userDAO = new UserDAO();\r\n            usersList.setAll(userDAO.getAllUsers(false));\r\n            usersTable.setItems(usersList);\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleBanUserButton() {\r\n        User selectedUser = usersTable.getSelectionModel().getSelectedItem();\r\n        if (selectedUser != null && !selectedUser.getUsername().equals(getUsername())) {\r\n            try {\r\n                UserDAO userDAO = new UserDAO();\r\n                userDAO.banUser(selectedUser.getUsername(), false);\r\n                loadUsers(); // Refresh the users list\r\n                usersTable.getSelectionModel().select(selectedUser); // Retain the selection\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            // Show error message if the admin tries to ban themselves\r\n            LoggerUtil.logWarning(\"Admin cannot ban themselves.\");\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleUnbanUserButton() {\r\n        User selectedUser = usersTable.getSelectionModel().getSelectedItem();\r\n        if (selectedUser != null) {\r\n            try {\r\n                UserDAO userDAO = new UserDAO();\r\n                userDAO.unbanUser(selectedUser.getUsername(), false);\r\n                loadUsers(); // Refresh the users list\r\n                usersTable.getSelectionModel().select(selectedUser); // Retain the selection\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleLogoutButton(ActionEvent event) {\r\n        navigateTo(LOGIN, event);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/AdminController.java b/src/main/java/controller/AdminController.java
--- a/src/main/java/controller/AdminController.java	
+++ b/src/main/java/controller/AdminController.java	
@@ -9,13 +9,13 @@
 import javafx.scene.control.cell.PropertyValueFactory;
 import model.user.User;
 import model.user.UserDAO;
-import utils.LoggerUtil;
+import util.LoggerUtil;
 
 import java.net.URL;
 import java.sql.SQLException;
 import java.util.ResourceBundle;
 
-import static utils.FXMLPaths.LOGIN;
+import static util.FXMLPaths.LOGIN;
 
 public class AdminController extends BaseController {
 
Index: src/main/java/util/Localizable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/Localizable.java b/src/main/java/util/Localizable.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/Localizable.java	
@@ -0,0 +1,6 @@
+package util;
+
+public interface Localizable {
+    String getKey();
+    String getValue();
+}
Index: src/main/java/controller/PlayerRankingsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\n\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.util.ResourceBundle;\r\n\r\nimport model.ranking.Ranking;\r\nimport model.user.UserDAO;\r\nimport utils.SceneConstants;\r\n\r\nimport static utils.FXMLPaths.MAIN_MENU;\r\nimport static utils.SceneConstants.SCORE;\r\nimport static utils.SceneConstants.USERNAME;\r\n\r\npublic class PlayerRankingsController extends BaseController implements Initializable {\r\n\r\n    @FXML\r\n    public Label rankings;\r\n\r\n    @FXML\r\n    private TableView<Ranking> rankingsTable;\r\n\r\n    @FXML\r\n    private TableColumn<Ranking, String> usernameColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Ranking, Integer> scoreColumn;\r\n\r\n    @FXML\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        UserDAO userDAO = new UserDAO();\r\n        setMultilingualElement(rankings, SceneConstants.PLAYER_RANKINGS);\r\n        usernameColumn.setCellValueFactory(new PropertyValueFactory<>(\"username\"));\r\n        setMultilingualElement(usernameColumn, USERNAME);\r\n        scoreColumn.setCellValueFactory(new PropertyValueFactory<>(\"score\"));\r\n        setMultilingualElement(scoreColumn, SCORE);\r\n\r\n        try {\r\n            rankingsTable.setItems(userDAO.getTopPlayers());\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleBackToMainMenuButton(ActionEvent event) {\r\n        navigateTo(MAIN_MENU, event);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/PlayerRankingsController.java b/src/main/java/controller/PlayerRankingsController.java
--- a/src/main/java/controller/PlayerRankingsController.java	
+++ b/src/main/java/controller/PlayerRankingsController.java	
@@ -12,13 +12,13 @@
 import java.sql.SQLException;
 import java.util.ResourceBundle;
 
-import model.ranking.Ranking;
+import model.score.Ranking;
 import model.user.UserDAO;
-import utils.SceneConstants;
+import util.SceneConstants;
 
-import static utils.FXMLPaths.MAIN_MENU;
-import static utils.SceneConstants.SCORE;
-import static utils.SceneConstants.USERNAME;
+import static util.FXMLPaths.MAIN_MENU;
+import static util.SceneConstants.SCORE;
+import static util.SceneConstants.USERNAME;
 
 public class PlayerRankingsController extends BaseController implements Initializable {
 
Index: src/main/java/util/ConfigUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/ConfigUtil.java b/src/main/java/util/ConfigUtil.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/ConfigUtil.java	
@@ -0,0 +1,44 @@
+package util;
+
+import exception.ConfigException;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+
+public class ConfigUtil {
+
+    private ConfigUtil() {}
+
+    private static final String CONFIG_FILE = "config.properties";
+    private static final String TEST_CONFIG_FILE = "test.properties";
+    private static final Properties properties = new Properties();
+    private static final Properties testProperties = new Properties();
+
+    static {
+        loadProperties(CONFIG_FILE, properties);
+    }
+
+    public static void loadTestConfig() {
+        loadProperties(TEST_CONFIG_FILE, testProperties);
+    }
+
+    private static void loadProperties(String fileName, Properties props) {
+        try (InputStream input = ConfigUtil.class.getClassLoader().getResourceAsStream(fileName)) {
+            if (input == null) {
+                throw new ConfigException("Configuration file not found: " + fileName);
+            }
+            props.load(input);
+        } catch (IOException e) {
+            throw new ConfigException("Failed to load configuration from file: " + fileName, e);
+        }
+    }
+
+    public static String getConfig(String key) {
+        return properties.getProperty(key);
+    }
+
+    public static String getTestConfig(String key) {
+        return testProperties.getProperty(key);
+    }
+}
Index: src/main/java/util/Texture.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/util/Texture.java b/src/main/java/util/Texture.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/util/Texture.java	
@@ -0,0 +1,31 @@
+package util;
+
+public enum Texture implements Localizable {
+    FOREST("texture.forest", "Forest", "forest.css"),
+    RETRO("texture.retro", "Retro", "retro.css"),
+    FUTURISTIC("texture.futuristic", "Futuristic", "futuristic.css");
+
+    private final String key;
+    private final String value;
+    private final String cssFile;
+
+    Texture(String key, String value, String cssFile) {
+        this.key = key;
+        this.value = value;
+        this.cssFile = cssFile;
+    }
+
+    @Override
+    public String getKey() {
+        return key;
+    }
+
+    @Override
+    public String getValue() {
+        return value;
+    }
+
+    public String getCssFile() {
+        return cssFile;
+    }
+}
Index: src/test/java/model/user/UserDAOTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.user;\r\n\r\nimport model.Score;\r\nimport model.database.Database;\r\nimport model.database.DatabaseInitializer;\r\nimport org.junit.jupiter.api.AfterEach;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.sqlite.SQLiteException;\r\nimport utils.ConfigUtil;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.SQLSyntaxErrorException;\r\nimport java.sql.Statement;\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass UserDAOTest {\r\n    private UserDAO userDAO;\r\n    private Connection connection;\r\n\r\n    @BeforeEach\r\n    public void setUp() throws Exception {\r\n        userDAO = new UserDAO();\r\n        ConfigUtil.loadTestConfig();\r\n        DatabaseInitializer.initializeTestDatabase();\r\n        connection = Database.getTestConnection();\r\n        try (Statement statement = connection.createStatement()) {\r\n            statement.executeUpdate(DatabaseInitializer.CREATE_EXTERNAL_USERS_TABLE);\r\n            statement.executeUpdate(DatabaseInitializer.CREATE_EXTERNAL_SCORES_TABLE);\r\n        } catch (SQLSyntaxErrorException | SQLiteException e) {\r\n            try (Statement statement = connection.createStatement()) {\r\n                statement.executeUpdate(DatabaseInitializer.CREATE_INTERNAL_USERS_TABLE);\r\n                statement.executeUpdate(DatabaseInitializer.CREATE_INTERNAL_SCORES_TABLE);\r\n            } catch (Exception ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    @AfterEach\r\n    public void tearDown() throws Exception {\r\n        if (connection != null && !connection.isClosed()) {\r\n            try (Statement statement = connection.createStatement()) {\r\n                statement.executeUpdate(\"DROP TABLE IF EXISTS scores\");\r\n                statement.executeUpdate(\"DROP TABLE IF EXISTS users\");\r\n            }\r\n            connection.close();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void testSaveUser() throws Exception {\r\n        User user = new User(\"testuser\", \"password\", \"reminder\", \"user\", \"active\");\r\n        userDAO.saveUser(user, true);\r\n\r\n        User fetchedUser = userDAO.getUser(\"testuser\", true);\r\n        assertNotNull(fetchedUser);\r\n        assertEquals(\"testuser\", fetchedUser.getUsername());\r\n        assertEquals(\"password\", fetchedUser.getPassword());\r\n        assertEquals(\"reminder\", fetchedUser.getPasswordReminder());\r\n        assertEquals(\"user\", fetchedUser.getRole());\r\n        assertEquals(\"active\", fetchedUser.getStatus());\r\n    }\r\n\r\n    @Test\r\n    void testBanUser() throws Exception {\r\n        User user = new User(\"testuser\", \"password\", \"reminder\", \"user\", \"active\");\r\n        userDAO.saveUser(user, true);\r\n        userDAO.banUser(\"testuser\", true);\r\n\r\n        User fetchedUser = userDAO.getUser(\"testuser\", true);\r\n        assertNotNull(fetchedUser);\r\n        assertEquals(\"banned\", fetchedUser.getStatus());\r\n    }\r\n\r\n    @Test\r\n    void testUnbanUser() throws Exception {\r\n        User user = new User(\"testuser\", \"password\", \"reminder\", \"user\", \"banned\");\r\n        userDAO.saveUser(user, true);\r\n        userDAO.unbanUser(\"testuser\", true);\r\n\r\n        User fetchedUser = userDAO.getUser(\"testuser\", true);\r\n        assertNotNull(fetchedUser);\r\n        assertEquals(\"active\", fetchedUser.getStatus());\r\n    }\r\n\r\n    @Test\r\n    void testSaveScore() throws Exception {\r\n        User user = new User(\"testuser\", \"password\", \"reminder\", \"user\", \"active\");\r\n        userDAO.saveUser(user, true);\r\n\r\n        userDAO.saveScore(\"testuser\", 100, true);\r\n        List<Score> scores = userDAO.getTopScores(\"testuser\", 10, true);\r\n\r\n        assertNotNull(scores);\r\n        assertEquals(1, scores.size());\r\n        assertEquals(100, scores.get(0).getScore());\r\n    }\r\n\r\n    @Test\r\n    void testGetTopScoresExcludingBannedUsers() throws Exception {\r\n        User user1 = new User(\"activeuser\", \"password\", \"reminder\", \"user\", \"active\");\r\n        User user2 = new User(\"banneduser\", \"password\", \"reminder\", \"user\", \"banned\");\r\n        userDAO.saveUser(user1, true);\r\n        userDAO.saveUser(user2, true);\r\n\r\n        userDAO.saveScore(\"activeuser\", 200, true);\r\n        userDAO.saveScore(\"banneduser\", 300, true);\r\n\r\n        List<Score> scores = userDAO.getTopScores(null, 10, true);\r\n        assertNotNull(scores);\r\n        assertEquals(1, scores.size());\r\n        assertEquals(\"activeuser\", scores.get(0).getUsername());\r\n        assertEquals(200, scores.get(0).getScore());\r\n    }\r\n\r\n    @Test\r\n    void testDeleteUser() throws Exception {\r\n        User user = new User(\"testuser\", \"password\", \"reminder\", \"user\", \"active\");\r\n        userDAO.saveUser(user, true);\r\n        userDAO.saveScore(\"testuser\", 100, true);\r\n\r\n        userDAO.deleteUser(\"testuser\", true);\r\n\r\n        User fetchedUser = userDAO.getUser(\"testuser\", true);\r\n        assertNull(fetchedUser);\r\n\r\n        List<Score> scores = userDAO.getTopScores(\"testuser\", 10, true);\r\n        assertTrue(scores.isEmpty());\r\n    }\r\n\r\n    @Test\r\n    void testGetAllUsers() throws Exception {\r\n        User user1 = new User(\"user1\", \"password1\", \"reminder1\", \"user\", \"active\");\r\n        User user2 = new User(\"user2\", \"password2\", \"reminder2\", \"user\", \"active\");\r\n        userDAO.saveUser(user1, true);\r\n        userDAO.saveUser(user2, true);\r\n\r\n        List<User> users = userDAO.getAllUsers(true);\r\n\r\n        assertNotNull(users);\r\n        assertEquals(2, users.size());\r\n    }\r\n\r\n    @Test\r\n    void testUpdateUser() throws Exception {\r\n        User user = new User(\"testuser\", \"password\", \"reminder\", \"user\", \"active\");\r\n        userDAO.saveUser(user, true);\r\n\r\n        user.setPassword(\"newpassword\");\r\n        user.setPasswordReminder(\"newreminder\");\r\n        userDAO.updateUser(user, true);\r\n\r\n        User updatedUser = userDAO.getUser(\"testuser\", true);\r\n\r\n        assertNotNull(updatedUser);\r\n        assertEquals(\"newpassword\", updatedUser.getPassword());\r\n        assertEquals(\"newreminder\", updatedUser.getPasswordReminder());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/model/user/UserDAOTest.java b/src/test/java/model/user/UserDAOTest.java
--- a/src/test/java/model/user/UserDAOTest.java	
+++ b/src/test/java/model/user/UserDAOTest.java	
@@ -1,13 +1,13 @@
 package model.user;
 
-import model.Score;
+import model.score.Score;
 import model.database.Database;
 import model.database.DatabaseInitializer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.sqlite.SQLiteException;
-import utils.ConfigUtil;
+import util.ConfigUtil;
 
 import java.sql.Connection;
 import java.sql.SQLSyntaxErrorException;
diff --git a/src/main/resources/view/forest.css b/src/main/resources/view/style/forest.css
rename from src/main/resources/view/forest.css
rename to src/main/resources/view/style/forest.css
diff --git a/src/main/resources/view/login.fxml b/src/main/resources/view/scene/login.fxml
rename from src/main/resources/view/login.fxml
rename to src/main/resources/view/scene/login.fxml
diff --git a/src/main/resources/view/game.fxml b/src/main/resources/view/scene/game.fxml
rename from src/main/resources/view/game.fxml
rename to src/main/resources/view/scene/game.fxml
diff --git a/src/main/resources/view/register.fxml b/src/main/resources/view/scene/register.fxml
rename from src/main/resources/view/register.fxml
rename to src/main/resources/view/scene/register.fxml
diff --git a/src/main/resources/view/description.fxml b/src/main/resources/view/scene/description.fxml
rename from src/main/resources/view/description.fxml
rename to src/main/resources/view/scene/description.fxml
diff --git a/src/main/resources/view/gameOver.fxml b/src/main/resources/view/scene/gameOver.fxml
rename from src/main/resources/view/gameOver.fxml
rename to src/main/resources/view/scene/gameOver.fxml
diff --git a/src/main/resources/view/settings.fxml b/src/main/resources/view/scene/settings.fxml
rename from src/main/resources/view/settings.fxml
rename to src/main/resources/view/scene/settings.fxml
diff --git a/src/main/resources/view/mainMenu.fxml b/src/main/resources/view/scene/mainMenu.fxml
rename from src/main/resources/view/mainMenu.fxml
rename to src/main/resources/view/scene/mainMenu.fxml
diff --git a/src/main/resources/view/playerRankings.fxml b/src/main/resources/view/scene/playerRankings.fxml
rename from src/main/resources/view/playerRankings.fxml
rename to src/main/resources/view/scene/playerRankings.fxml
diff --git a/src/main/resources/view/playerResults.fxml b/src/main/resources/view/scene/playerResults.fxml
rename from src/main/resources/view/playerResults.fxml
rename to src/main/resources/view/scene/playerResults.fxml
diff --git a/src/main/resources/view/changePassword.fxml b/src/main/resources/view/scene/changePassword.fxml
rename from src/main/resources/view/changePassword.fxml
rename to src/main/resources/view/scene/changePassword.fxml
diff --git a/src/main/resources/view/confirmationDialog.fxml b/src/main/resources/view/scene/confirmationDialog.fxml
rename from src/main/resources/view/confirmationDialog.fxml
rename to src/main/resources/view/scene/confirmationDialog.fxml
diff --git a/src/main/resources/view/retro.css b/src/main/resources/view/style/retro.css
rename from src/main/resources/view/retro.css
rename to src/main/resources/view/style/retro.css
diff --git a/src/main/resources/view/futuristic.css b/src/main/resources/view/style/futuristic.css
rename from src/main/resources/view/futuristic.css
rename to src/main/resources/view/style/futuristic.css
